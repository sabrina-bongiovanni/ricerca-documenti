import { Alert as Alert$1, Util, Badge as Badge$1, Breadcrumb as Breadcrumb$1, Button as Button$1, Card as Card$1, CardBody as CardBody$1, CardTitle as CardTitle$1, CardText as CardText$1, Collapse as Collapse$1, NavbarBrand, Navbar, NavbarToggler, Container, Row, Col, Nav as Nav$1, UncontrolledDropdown, DropdownToggle, DropdownMenu, Modal as Modal$1, ModalBody as ModalBody$1, ModalFooter as ModalFooter$1, FormGroup, Label, Input as Input$1 } from 'reactstrap';
export { BreadcrumbItem, ButtonDropdown, ButtonGroup, ButtonToolbar, CardColumns, CardDeck, CardFooter, CardGroup, CardHeader, CardImg, CardImgOverlay, CardLink, CardSubtitle, Col, Container, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Fade, Form, FormFeedback, FormGroup, FormText, InputGroup, InputGroupAddon, InputGroupButtonDropdown, InputGroupText, Jumbotron, Label, ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText, Media, NavItem, NavLink, Navbar, NavbarBrand, NavbarToggler, PaginationItem as PagerItem, PaginationLink as PagerLink, Popover, PopoverBody, PopoverHeader, Row, TabContent, TabPane, Table, Tooltip, UncontrolledAlert, UncontrolledButtonDropdown, UncontrolledCollapse, UncontrolledDropdown, UncontrolledTooltip, Util } from 'reactstrap';
export { useNavScroll } from 'react-use-navscroll';
import React__default, { Component, useState, useEffect, PureComponent, Fragment, createContext, useContext } from 'react';
import classNames from 'classnames';
import { Transition } from 'react-transition-group';
import { StickyProvider, Sticky } from 'react-stickup';
import isNumber from 'is-number';
import resizer from 'bootstrap-italia/dist/assets/resizer-3x2.svg';
import SelectBase, { components } from 'react-select';
import { useToast, cssTransition, useToastContainer, toast } from 'react-toastify';

var defaultProps = {
  color: 'success',
  isOpen: true,
  fade: true
};
var Alert = function Alert(props) {
  return React__default.createElement(Alert$1, Object.assign({}, props));
};
Alert.defaultProps = defaultProps;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

var Accordion = function Accordion(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      className = _ref.className,
      background = _ref.background,
      _ref$iconLeft = _ref.iconLeft,
      iconLeft = _ref$iconLeft === void 0 ? false : _ref$iconLeft,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "className", "background", "iconLeft"]);

  var Tag = tag;
  var classes = classNames('collapse-div', className, {
    'collapse-background-active': background === 'active',
    'collapse-background-hover': background === 'hover',
    'collapse-left-icon': iconLeft
  });
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: classes
  }));
};

var AccordionHeader = function AccordionHeader(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'button' : _ref$tag,
      _ref$active = _ref.active,
      active = _ref$active === void 0 ? false : _ref$active,
      append = _ref.append,
      onToggle = _ref.onToggle,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag", "active", "append", "onToggle"]);

  var Tag = tag;
  var toggleClasses = classNames(className, {
    collapsed: active
  });
  return React__default.createElement("div", {
    className: 'collapse-header'
  }, React__default.createElement(Tag, Object.assign({
    "data-toggle": 'collapse',
    "aria-expanded": active ? 'true' : 'false',
    className: toggleClasses,
    onClick: onToggle
  }, attributes)), append);
};

var _transitionStatusToCl;
var TransitionTimeouts = Util.TransitionTimeouts,
    TransitionPropTypeKeys = Util.TransitionPropTypeKeys,
    TransitionStatuses = Util.TransitionStatuses,
    pick = Util.pick,
    omit = Util.omit;
var transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);

function getTransitionClass(status) {
  return transitionStatusToClassHash[status] || 'collapse';
}

function getHeight(node) {
  return node.scrollHeight;
}

var AccordionBody = /*#__PURE__*/function (_Component) {
  _inheritsLoose(AccordionBody, _Component);

  function AccordionBody() {
    var _this;

    _this = _Component.apply(this, arguments) || this;
    _this.state = {
      height: null
    };

    _this.onEntering = function (node, isAppearing) {
      _this.setState({
        height: getHeight(node)
      });

      _this.props.onEntering == null ? void 0 : _this.props.onEntering(node, isAppearing);
    };

    _this.onEntered = function (node, isAppearing) {
      _this.setState({
        height: null
      });

      _this.props.onEntered == null ? void 0 : _this.props.onEntered(node, isAppearing);
    };

    _this.onExit = function (node) {
      _this.setState({
        height: getHeight(node)
      });

      _this.props.onExit == null ? void 0 : _this.props.onExit(node);
    };

    _this.onExiting = function (node) {

      _this.setState({
        height: 0
      });

      _this.props.onExiting == null ? void 0 : _this.props.onExiting(node);
    };

    _this.onExited = function (node) {
      _this.setState({
        height: null
      });

      _this.props.onExited == null ? void 0 : _this.props.onExited(node);
    };

    return _this;
  }

  var _proto = AccordionBody.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        className = _this$props.className,
        _this$props$tag = _this$props.tag,
        tag = _this$props$tag === void 0 ? 'div' : _this$props$tag,
        _this$props$active = _this$props.active,
        active = _this$props$active === void 0 ? false : _this$props$active,
        children = _this$props.children,
        _this$props$timeout = _this$props.timeout,
        timeout = _this$props$timeout === void 0 ? TransitionTimeouts.Collapse : _this$props$timeout,
        attributes = _objectWithoutPropertiesLoose(_this$props, ["className", "tag", "active", "children", "timeout"]);

    var Tag = tag;
    var height = this.state.height;
    var transitionProps = pick(attributes, TransitionPropTypeKeys);
    var childProps = omit(attributes, TransitionPropTypeKeys);
    return React__default.createElement(Transition, Object.assign({}, transitionProps, {
      timeout: timeout,
      in: active,
      onEntering: this.onEntering,
      onEntered: this.onEntered,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }), function (status) {
      var transitionClass = getTransitionClass(status);
      var classes = classNames(className, transitionClass);
      var style = height == null ? null : {
        height: height
      };
      return React__default.createElement(Tag, Object.assign({
        className: classes,
        style: _extends({}, childProps.style, style)
      }, childProps), React__default.createElement("div", {
        className: 'collapse-body'
      }, children));
    });
  };

  return AccordionBody;
}(Component);

var AvatarContainer = function AvatarContainer(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag"]);

  var Tag = tag;
  var wrapperClasses = classNames('d-flex align-items-center justify-content-around flex-wrap flex-sm-nowrap', className);
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: wrapperClasses
  }));
};

var AvatarGroupContainer = function AvatarGroupContainer(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'ul' : _ref$tag,
      wrapperClassName = _ref.wrapperClassName,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag", "wrapperClassName"]);

  var Tag = tag;
  var wrapperClasses = classNames('avatar-group-stacked', wrapperClassName);
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: wrapperClasses
  }));
};

var AvatarExtraText = function AvatarExtraText(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag"]);

  var Tag = tag;
  var wrapperClass = classNames('extra-text', className);
  return React__default.createElement(Tag, Object.assign({
    className: wrapperClass
  }, attributes));
};

var AvatarIcon = function AvatarIcon(_ref) {
  var _classNames;

  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'md' : _ref$size,
      href = _ref.href,
      color = _ref.color,
      innerRef = _ref.innerRef,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag", "size", "href", "color", "innerRef", "children"]);

  var Tag = tag;
  var typeClass = classNames('avatar', (_classNames = {}, _classNames["size-" + size] = size, _classNames["avatar-" + color] = color, _classNames));

  if (href) {
    return React__default.createElement("a", Object.assign({
      href: href
    }, attributes, {
      className: typeClass,
      ref: innerRef
    }), children);
  }

  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: typeClass
  }), children);
};

var AvatarPresence = function AvatarPresence(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      presence = _ref.presence,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag", "presence"]);

  var Tag = tag;
  var typeClass = classNames('avatar-presence', {
    presence: presence
  });
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: typeClass
  }));
};

var AvatarStatus = function AvatarStatus(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      status = _ref.status,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag", "status"]);

  var Tag = tag;
  var typeClass = classNames('avatar-status', {
    status: status
  });
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: typeClass
  }));
};

var AvatarWrapper = function AvatarWrapper(_ref) {
  var _classNames;

  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      extra = _ref.extra,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag", "extra"]);

  var Tag = tag;
  var wrapperClass = classNames('avatar-wrapper', className, (_classNames = {}, _classNames["avatar-extra-" + extra] = extra, _classNames));
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: wrapperClass
  }));
};

var Badge = function Badge(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'secondary' : _ref$color,
      _ref$pill = _ref.pill,
      pill = _ref$pill === void 0 ? false : _ref$pill,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'span' : _ref$tag,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["color", "pill", "tag", "children"]);

  return React__default.createElement(Badge$1, Object.assign({
    color: color,
    pill: pill,
    tag: tag
  }, attributes), children);
};

var Breadcrumb = function Breadcrumb(_ref) {
  var className = _ref.className,
      listClassName = _ref.listClassName,
      dark = _ref.dark,
      label = _ref['aria-label'],
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "listClassName", "dark", "aria-label"]);

  var classes = classNames(className, 'breadcrumb-container');
  var listClasses = classNames(listClassName, {
    dark: dark
  });
  var ariaLabel = label != null ? label : 'breadcrumb';
  return React__default.createElement(Breadcrumb$1, Object.assign({
    className: classes,
    listClassName: listClasses,
    "aria-label": ariaLabel
  }, attributes));
};

var Button = function Button(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'button' : _ref$tag,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? false : _ref$icon,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '' : _ref$color,
      className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "icon", "color", "className"]);

  var classes = classNames(className, {
    'btn-icon': icon
  });

  var ariaAttributes = _extends({}, attributes.disabled && {
    'aria-disabled': true
  });

  var baseProps = {
    color: color,
    tag: tag
  };
  return React__default.createElement(Button$1, Object.assign({
    className: classes
  }, baseProps, attributes, ariaAttributes));
};

if (typeof window === 'undefined') {
  global.Element = typeof Element === 'undefined' ? function () {} : Element;
}

var Forward = function Forward(_ref) {
  var className = _ref.className,
      scrollToRef = _ref.scrollToRef,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "scrollToRef", "children"]);

  var classes = classNames(className, 'forward');
  return React__default.createElement("a", Object.assign({
    className: classes,
    onClick: function onClick() {
      return scrollToRef.current.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
  }, attributes), children);
};

var Callout = function Callout(_ref) {
  var children = _ref.children,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '' : _ref$color,
      _ref$highlight = _ref.highlight,
      highlight = _ref$highlight === void 0 ? false : _ref$highlight,
      detailed = _ref.detailed,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["children", "color", "highlight", "detailed", "tag"]);

  var Tag = tag;
  var classes = classNames('callout', color, {
    'callout-highlight': highlight,
    'callout-more': detailed
  });
  return React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes), children);
};

var CalloutText = function CalloutText(_ref) {
  var _ref$bigText = _ref.bigText,
      bigText = _ref$bigText === void 0 ? false : _ref$bigText,
      children = _ref.children,
      className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'p' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["bigText", "children", "className", "tag"]);

  var Tag = tag;
  var classes = classNames(className, {
    'callout-big-text': bigText
  });
  return React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes), children);
};

var CalloutTitle = function CalloutTitle(_ref) {
  var children = _ref.children,
      className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["children", "className", "tag"]);

  var Tag = tag;
  var classes = classNames(className, 'callout-title');
  return React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes), children);
};

var Card = function Card(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      teaser = _ref.teaser,
      spacing = _ref.spacing,
      _ref$noWrapper = _ref.noWrapper,
      noWrapper = _ref$noWrapper === void 0 ? false : _ref$noWrapper,
      wrapperClassName = _ref.wrapperClassName,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "teaser", "spacing", "noWrapper", "wrapperClassName"]);

  var wrapperClasses = classNames('card-wrapper', wrapperClassName, {
    'card-space': spacing,
    'card-teaser-wrapper': teaser
  });
  var cardClasses = classNames(attributes.className, {
    'card-teaser': teaser
  });

  if (noWrapper) {
    return React__default.createElement(Card$1, Object.assign({}, attributes, {
      className: cardClasses,
      tag: tag
    }));
  }

  return React__default.createElement("div", {
    className: wrapperClasses
  }, React__default.createElement(Card$1, Object.assign({}, attributes, {
    className: cardClasses,
    tag: tag
  })));
};

var CardBody = function CardBody(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      props = _objectWithoutPropertiesLoose(_ref, ["tag"]);

  return React__default.createElement(CardBody$1, Object.assign({}, props, {
    tag: tag
  }));
};

var CardTitle = function CardTitle(props) {
  return React__default.createElement(CardTitle$1, Object.assign({}, props));
};

var CardText = function CardText(props) {
  return React__default.createElement(CardText$1, Object.assign({}, props));
};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var iconList = {
  'it-arrow-down-circle': true,
  'it-arrow-down-triangle': true,
  'it-arrow-down': true,
  'it-arrow-left-circle': true,
  'it-arrow-left-triangle': true,
  'it-arrow-left': true,
  'it-arrow-right-circle': true,
  'it-arrow-right-triangle': true,
  'it-arrow-right': true,
  'it-arrow-up-circle': true,
  'it-arrow-up-triangle': true,
  'it-arrow-up': true,
  'it-ban': true,
  'it-behance': true,
  'it-bookmark': true,
  'it-box': true,
  'it-burger': true,
  'it-calendar': true,
  'it-camera': true,
  'it-card': true,
  'it-chart-line': true,
  'it-check-circle': true,
  'it-check': true,
  'it-chevron-left': true,
  'it-chevron-right': true,
  'it-clip': true,
  'it-clock': true,
  'it-close-big': true,
  'it-close-circle': true,
  'it-close': true,
  'it-code-circle': true,
  'it-collapse': true,
  'it-comment': true,
  'it-copy': true,
  'it-delete': true,
  'it-designers-italia': true,
  'it-download': true,
  'it-error': true,
  'it-exchange-circle': true,
  'it-expand': true,
  'it-external-link': true,
  'it-facebook-square': true,
  'it-facebook': true,
  'it-file': true,
  'it-files': true,
  'it-flag': true,
  'it-flickr-square': true,
  'it-flickr': true,
  'it-folder': true,
  'it-fullscreen': true,
  'it-funnel': true,
  'it-github': true,
  'it-hearing': true,
  'it-help-circle': true,
  'it-help': true,
  'it-horn': true,
  'it-inbox': true,
  'it-info-circle': true,
  'it-instagram': true,
  'it-key': true,
  'it-less-circle': true,
  'it-link': true,
  'it-linkedin-square': true,
  'it-linkedin': true,
  'it-list': true,
  'it-lock': true,
  'it-locked': true,
  'it-mail': true,
  'it-map-marker-circle': true,
  'it-map-marker-minus': true,
  'it-map-marker-plus': true,
  'it-map-marker': true,
  'it-maximize-alt': true,
  'it-maximize': true,
  'it-medium-square': true,
  'it-medium': true,
  'it-minimize': true,
  'it-minus-circle': true,
  'it-minus': true,
  'it-more-actions': true,
  'it-more-items': true,
  'it-note': true,
  'it-open-source': true,
  'it-pa': true,
  'it-password-invisible': true,
  'it-password-visible': true,
  'it-pencil': true,
  'it-piattaforme': true,
  'it-pin': true,
  'it-plug': true,
  'it-plus-circle': true,
  'it-plus': true,
  'it-presentation': true,
  'it-print': true,
  'it-refresh': true,
  'it-restore': true,
  'it-rss-square': true,
  'it-rss': true,
  'it-search': true,
  'it-settings': true,
  'it-share': true,
  'it-software': true,
  'it-star-full': true,
  'it-star-outline': true,
  'it-team-digitale': true,
  'it-telegram': true,
  'it-telephone': true,
  'it-tool': true,
  'it-twitter-square': true,
  'it-twitter': true,
  'it-unlocked': true,
  'it-upload': true,
  'it-user': true,
  'it-video': true,
  'it-warning-circle': true,
  'it-warning': true,
  'it-whatsapp-square': true,
  'it-whatsapp': true,
  'it-wifi': true,
  'it-youtube': true,
  'it-zoom-in': true,
  'it-zoom-out': true
};
var loadIcon = function loadIcon(name) {
  switch (name) {
    case 'it-arrow-down-circle':
      {
        return import('./ItArrowDownCircle-ed01958f.js');
      }

    case 'it-arrow-down-triangle':
      {
        return import('./ItArrowDownTriangle-43e14d4e.js');
      }

    case 'it-arrow-down':
      {
        return import('./ItArrowDown-f935c404.js');
      }

    case 'it-arrow-left-circle':
      {
        return import('./ItArrowLeftCircle-022f3cd0.js');
      }

    case 'it-arrow-left-triangle':
      {
        return import('./ItArrowLeftTriangle-85ad190a.js');
      }

    case 'it-arrow-left':
      {
        return import('./ItArrowLeft-0eb29da6.js');
      }

    case 'it-arrow-right-circle':
      {
        return import('./ItArrowRightCircle-004ceffe.js');
      }

    case 'it-arrow-right-triangle':
      {
        return import('./ItArrowRightTriangle-2270d70b.js');
      }

    case 'it-arrow-right':
      {
        return import('./ItArrowRight-ea38dca9.js');
      }

    case 'it-arrow-up-circle':
      {
        return import('./ItArrowUpCircle-c58494d6.js');
      }

    case 'it-arrow-up-triangle':
      {
        return import('./ItArrowUpTriangle-a3d220d7.js');
      }

    case 'it-arrow-up':
      {
        return import('./ItArrowUp-4da728d9.js');
      }

    case 'it-ban':
      {
        return import('./ItBan-eed8efa1.js');
      }

    case 'it-behance':
      {
        return import('./ItBehance-7cfa1aa8.js');
      }

    case 'it-bookmark':
      {
        return import('./ItBookmark-bbd0a6eb.js');
      }

    case 'it-box':
      {
        return import('./ItBox-c57a00d9.js');
      }

    case 'it-burger':
      {
        return import('./ItBurger-a48f8693.js');
      }

    case 'it-calendar':
      {
        return import('./ItCalendar-4ced1f4f.js');
      }

    case 'it-camera':
      {
        return import('./ItCamera-ea37a275.js');
      }

    case 'it-card':
      {
        return import('./ItCard-08e35364.js');
      }

    case 'it-chart-line':
      {
        return import('./ItChartLine-4d19c837.js');
      }

    case 'it-check-circle':
      {
        return import('./ItCheckCircle-80464fda.js');
      }

    case 'it-check':
      {
        return import('./ItCheck-b13dfb47.js');
      }

    case 'it-chevron-left':
      {
        return import('./ItChevronLeft-9e6f642c.js');
      }

    case 'it-chevron-right':
      {
        return import('./ItChevronRight-5d8994f9.js');
      }

    case 'it-clip':
      {
        return import('./ItClip-5625b723.js');
      }

    case 'it-clock':
      {
        return import('./ItClock-e99f09d6.js');
      }

    case 'it-close-big':
      {
        return import('./ItCloseBig-48385084.js');
      }

    case 'it-close-circle':
      {
        return import('./ItCloseCircle-e9aa8a4e.js');
      }

    case 'it-close':
      {
        return import('./ItClose-da35711d.js');
      }

    case 'it-code-circle':
      {
        return import('./ItCodeCircle-f1a1174b.js');
      }

    case 'it-collapse':
      {
        return import('./ItCollapse-7eeb99ff.js');
      }

    case 'it-comment':
      {
        return import('./ItComment-a939362d.js');
      }

    case 'it-copy':
      {
        return import('./ItCopy-a064bc7e.js');
      }

    case 'it-delete':
      {
        return import('./ItDelete-49e04a94.js');
      }

    case 'it-designers-italia':
      {
        return import('./ItDesignersItalia-a7e1e47e.js');
      }

    case 'it-download':
      {
        return import('./ItDownload-223fddb3.js');
      }

    case 'it-error':
      {
        return import('./ItError-6411ebd1.js');
      }

    case 'it-exchange-circle':
      {
        return import('./ItExchangeCircle-b2e80da1.js');
      }

    case 'it-expand':
      {
        return import('./ItExpand-b9bf051e.js');
      }

    case 'it-external-link':
      {
        return import('./ItExternalLink-3839a562.js');
      }

    case 'it-facebook-square':
      {
        return import('./ItFacebookSquare-5d1a9e56.js');
      }

    case 'it-facebook':
      {
        return import('./ItFacebook-a587f690.js');
      }

    case 'it-file':
      {
        return import('./ItFile-713e7067.js');
      }

    case 'it-files':
      {
        return import('./ItFiles-f13caaef.js');
      }

    case 'it-flag':
      {
        return import('./ItFlag-818a6c3e.js');
      }

    case 'it-flickr-square':
      {
        return import('./ItFlickrSquare-f0eccb5c.js');
      }

    case 'it-flickr':
      {
        return import('./ItFlickr-a1ae3080.js');
      }

    case 'it-folder':
      {
        return import('./ItFolder-46e3c66c.js');
      }

    case 'it-fullscreen':
      {
        return import('./ItFullscreen-fd759316.js');
      }

    case 'it-funnel':
      {
        return import('./ItFunnel-fcb6dbeb.js');
      }

    case 'it-github':
      {
        return import('./ItGithub-ea460a17.js');
      }

    case 'it-hearing':
      {
        return import('./ItHearing-6a6a24b1.js');
      }

    case 'it-help-circle':
      {
        return import('./ItHelpCircle-5ac93785.js');
      }

    case 'it-help':
      {
        return import('./ItHelp-271b034b.js');
      }

    case 'it-horn':
      {
        return import('./ItHorn-779c3634.js');
      }

    case 'it-inbox':
      {
        return import('./ItInbox-7d3124b3.js');
      }

    case 'it-info-circle':
      {
        return import('./ItInfoCircle-ecce1964.js');
      }

    case 'it-instagram':
      {
        return import('./ItInstagram-a22a92f7.js');
      }

    case 'it-key':
      {
        return import('./ItKey-27cc1af3.js');
      }

    case 'it-less-circle':
      {
        return import('./ItLessCircle-5fd48c2f.js');
      }

    case 'it-link':
      {
        return import('./ItLink-d67a489f.js');
      }

    case 'it-linkedin-square':
      {
        return import('./ItLinkedinSquare-0c3cdc22.js');
      }

    case 'it-linkedin':
      {
        return import('./ItLinkedin-9cfc3fae.js');
      }

    case 'it-list':
      {
        return import('./ItList-8d490e85.js');
      }

    case 'it-lock':
      {
        return import('./ItLock-9d50d11c.js');
      }

    case 'it-locked':
      {
        return import('./ItLocked-f6436368.js');
      }

    case 'it-mail':
      {
        return import('./ItMail-df1e741a.js');
      }

    case 'it-map-marker-circle':
      {
        return import('./ItMapMarkerCircle-563223f9.js');
      }

    case 'it-map-marker-minus':
      {
        return import('./ItMapMarkerMinus-edb3574a.js');
      }

    case 'it-map-marker-plus':
      {
        return import('./ItMapMarkerPlus-da25d79c.js');
      }

    case 'it-map-marker':
      {
        return import('./ItMapMarker-b63f733c.js');
      }

    case 'it-maximize-alt':
      {
        return import('./ItMaximizeAlt-3b44dd74.js');
      }

    case 'it-maximize':
      {
        return import('./ItMaximize-8a293b02.js');
      }

    case 'it-medium-square':
      {
        return import('./ItMediumSquare-6de2cbd2.js');
      }

    case 'it-medium':
      {
        return import('./ItMedium-fda5c30a.js');
      }

    case 'it-minimize':
      {
        return import('./ItMinimize-eb2ef1b9.js');
      }

    case 'it-minus-circle':
      {
        return import('./ItMinusCircle-a4ad8e7e.js');
      }

    case 'it-minus':
      {
        return import('./ItMinus-f14df53a.js');
      }

    case 'it-more-actions':
      {
        return import('./ItMoreActions-1a78b8bd.js');
      }

    case 'it-more-items':
      {
        return import('./ItMoreItems-994f3a0f.js');
      }

    case 'it-note':
      {
        return import('./ItNote-e3b62893.js');
      }

    case 'it-open-source':
      {
        return import('./ItOpenSource-63a1d44f.js');
      }

    case 'it-pa':
      {
        return import('./ItPa-8303599f.js');
      }

    case 'it-password-invisible':
      {
        return import('./ItPasswordInvisible-6905b324.js');
      }

    case 'it-password-visible':
      {
        return import('./ItPasswordVisible-24431639.js');
      }

    case 'it-pencil':
      {
        return import('./ItPencil-653ba0f7.js');
      }

    case 'it-piattaforme':
      {
        return import('./ItPiattaforme-88f0e33e.js');
      }

    case 'it-pin':
      {
        return import('./ItPin-6afe491b.js');
      }

    case 'it-plug':
      {
        return import('./ItPlug-307dee08.js');
      }

    case 'it-plus-circle':
      {
        return import('./ItPlusCircle-088c90ce.js');
      }

    case 'it-plus':
      {
        return import('./ItPlus-adeccea9.js');
      }

    case 'it-presentation':
      {
        return import('./ItPresentation-1145d3ea.js');
      }

    case 'it-print':
      {
        return import('./ItPrint-385582c1.js');
      }

    case 'it-refresh':
      {
        return import('./ItRefresh-d4630557.js');
      }

    case 'it-restore':
      {
        return import('./ItRestore-d4706243.js');
      }

    case 'it-rss-square':
      {
        return import('./ItRssSquare-cf0e5940.js');
      }

    case 'it-rss':
      {
        return import('./ItRss-546f5827.js');
      }

    case 'it-search':
      {
        return import('./ItSearch-78977d22.js');
      }

    case 'it-settings':
      {
        return import('./ItSettings-26f72896.js');
      }

    case 'it-share':
      {
        return import('./ItShare-3f639a55.js');
      }

    case 'it-software':
      {
        return import('./ItSoftware-59a24bb3.js');
      }

    case 'it-star-full':
      {
        return import('./ItStarFull-e7491d5b.js');
      }

    case 'it-star-outline':
      {
        return import('./ItStarOutline-802e6204.js');
      }

    case 'it-team-digitale':
      {
        return import('./ItTeamDigitale-5a025df7.js');
      }

    case 'it-telegram':
      {
        return import('./ItTelegram-7bb55bce.js');
      }

    case 'it-telephone':
      {
        return import('./ItTelephone-3447b069.js');
      }

    case 'it-tool':
      {
        return import('./ItTool-e87380ab.js');
      }

    case 'it-twitter-square':
      {
        return import('./ItTwitterSquare-3f1a6138.js');
      }

    case 'it-twitter':
      {
        return import('./ItTwitter-47ea4eb7.js');
      }

    case 'it-unlocked':
      {
        return import('./ItUnlocked-ce1c89be.js');
      }

    case 'it-upload':
      {
        return import('./ItUpload-b224e070.js');
      }

    case 'it-user':
      {
        return import('./ItUser-dc34de8e.js');
      }

    case 'it-video':
      {
        return import('./ItVideo-62f9a455.js');
      }

    case 'it-warning-circle':
      {
        return import('./ItWarningCircle-cb2a4dd8.js');
      }

    case 'it-warning':
      {
        return import('./ItWarning-c5264ce7.js');
      }

    case 'it-whatsapp-square':
      {
        return import('./ItWhatsappSquare-f557e07b.js');
      }

    case 'it-whatsapp':
      {
        return import('./ItWhatsapp-02928732.js');
      }

    case 'it-wifi':
      {
        return import('./ItWifi-ce1648c9.js');
      }

    case 'it-youtube':
      {
        return import('./ItYoutube-291b7a7a.js');
      }

    case 'it-zoom-in':
      {
        return import('./ItZoomIn-35bcda8e.js');
      }

    case 'it-zoom-out':
      {
        return import('./ItZoomOut-dcb3a379.js');
      }

    default:
      throw Error("It should not land here. Requested icon: \"" + name + "\"");
  }
};
function isBundledIcon(name) {
  return name in iconList;
}
var allIcons = /*#__PURE__*/Object.keys(iconList);

var EmptyIcon = function EmptyIcon(props) {
  return React__default.createElement("svg", Object.assign({
    xmlns: 'http://www.w3.org/2000/svg',
    viewBox: '0 0 24 24'
  }, props), React__default.createElement("path", {
    fill: 'none',
    d: 'M0 0h24v24H0z'
  }));
};

var iconsList = allIcons;
var iconsCache = {};
/**
 * Preload a list of icons in cache
 * @param icons - the list of icons to preload
 * @returns true if the icons have been preloaded
 */

function preloadIcons(_x) {
  return _preloadIcons.apply(this, arguments);
}
/**
 * Removes icons from cache
 * @param icon? - the icon to remove, or nothing to clear the whole cache
 * @returns an object containing the removed icons
 */

function _preloadIcons() {
  _preloadIcons = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(icons) {
    var preloadedIcons;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return Promise.all(icons.map(function (icon) {
              return loadIcon(icon);
            }));

          case 2:
            preloadedIcons = _context.sent;
            preloadedIcons.forEach(function (_ref3, i) {
              var component = _ref3.component;

              iconsCache[icons[i]] = function () {
                return component;
              };
            });
            return _context.abrupt("return", true);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _preloadIcons.apply(this, arguments);
}

var clearIconCache = function clearIconCache(iconName) {
  var deletedItems;

  if (iconName) {
    deletedItems = {
      iconName: iconsCache[iconName]
    };
    delete iconsCache[iconName];
  } else {
    deletedItems = _extends({}, iconsCache);
    iconsCache = {};
  }

  return deletedItems;
};
var Icon = function Icon(_ref) {
  var _classNames;

  var _ref$color = _ref.color,
      color = _ref$color === void 0 ? '' : _ref$color,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? '' : _ref$size,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? '' : _ref$icon,
      className = _ref.className,
      _ref$padding = _ref.padding,
      padding = _ref$padding === void 0 ? false : _ref$padding,
      onIconLoad = _ref.onIconLoad,
      attributes = _objectWithoutPropertiesLoose(_ref, ["color", "size", "icon", "className", "padding", "onIconLoad"]);

  var _useState = useState(iconsCache[icon]),
      IconComponent = _useState[0],
      setCurrentIcon = _useState[1];

  var classes = classNames('icon', className, (_classNames = {}, _classNames["icon-" + color] = color, _classNames["icon-" + size] = size, _classNames['icon-padded'] = padding, _classNames));
  useEffect(function () {
    if (isBundledIcon(icon) && !iconsCache[icon]) {
      loadIcon(icon).then(function (_ref2) {
        var component = _ref2.component;

        iconsCache[icon] = function () {
          return component;
        };

        setCurrentIcon(iconsCache[icon]);
        onIconLoad == null ? void 0 : onIconLoad();
      });
    } else {
      onIconLoad == null ? void 0 : onIconLoad();
    }
  }, [icon, onIconLoad]);

  if (!isBundledIcon(icon)) {
    // assume it's an image and let the browser do its job
    return (// eslint-disable-next-line jsx-a11y/alt-text
      React__default.createElement("img", Object.assign({
        src: icon,
        className: classes
      }, attributes))
    );
  }

  if (!IconComponent) {
    return React__default.createElement(EmptyIcon, Object.assign({
      className: classes,
      role: 'img'
    }, attributes));
  }

  return React__default.createElement(IconComponent, Object.assign({
    className: classes,
    role: 'img'
  }, attributes));
};

var CardCategory = function CardCategory(_ref) {
  var iconName = _ref.iconName,
      date = _ref.date,
      href = _ref.href,
      onClick = _ref.onClick,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["iconName", "date", "href", "onClick", "children"]);

  var classes = classNames({
    'category-top': date || ' ',
    'categoryicon-top': iconName
  }); // Simple category link

  var categoryLink = !iconName && React__default.createElement("a", {
    href: href,
    className: 'category',
    onClick: onClick
  }, children);
  var categoryDate = date && React__default.createElement("span", {
    className: 'data'
  }, date); // Category with icon

  var categoryText = iconName && React__default.createElement("span", {
    className: 'text'
  }, children);
  var categoryIcon = iconName && React__default.createElement(Icon, {
    icon: iconName
  });
  return React__default.createElement("div", Object.assign({
    className: classes
  }, rest), categoryLink, categoryIcon, categoryText, categoryDate);
};

var CardTag = function CardTag(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'a' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag"]);

  var Tag = tag;
  var classes = classNames(className, 'card-tag');
  return React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes));
};

var CardTagsHeader = function CardTagsHeader(_ref) {
  var date = _ref.date,
      children = _ref.children,
      className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["date", "children", "className", "tag"]);

  var Tag = tag;
  var classes = classNames('head-tags', className);
  return React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes), children, date && React__default.createElement("span", {
    className: 'data'
  }, date));
};

var CardSignature = function CardSignature(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'span' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag"]);

  var Tag = tag;
  var classes = classNames(className, 'card-signature');
  return React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes));
};

var CardFooterCTA = function CardFooterCTA(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag"]);

  var Tag = tag;
  var classes = classNames(className, 'it-card-footer');
  return React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes));
};

var CardReadMore = function CardReadMore(_ref) {
  var className = _ref.className,
      text = _ref.text,
      _ref$iconName = _ref.iconName,
      iconName = _ref$iconName === void 0 ? 'it-arrow-right' : _ref$iconName,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'a' : _ref$tag,
      href = _ref.href,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "text", "iconName", "tag", "href"]);

  var Tag = tag;
  var classes = classNames(className, 'read-more');
  return React__default.createElement(Tag, Object.assign({
    className: classes,
    href: href
  }, attributes), React__default.createElement("span", {
    className: 'text'
  }, text), iconName && React__default.createElement(Icon, {
    icon: iconName
  }));
};

var Collapse = function Collapse(_ref) {
  var _ref$header = _ref.header,
      header = _ref$header === void 0 ? false : _ref$header,
      className = _ref.className,
      navbar = _ref.navbar,
      megamenu = _ref.megamenu,
      children = _ref.children,
      _ref$isOpen = _ref.isOpen,
      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,
      onOverlayClick = _ref.onOverlayClick,
      cssModule = _ref.cssModule,
      attributes = _objectWithoutPropertiesLoose(_ref, ["header", "className", "navbar", "megamenu", "children", "isOpen", "onOverlayClick", "cssModule"]);

  var newCssModule = _extends({
    'navbar-collapse': 'navbar-collapsable'
  }, cssModule);

  if (megamenu || navbar || header) {
    var _classes = classNames(className, 'navbar-collapse', {
      expanded: isOpen
    });

    var style = {
      display: isOpen ? 'block' : 'none'
    };
    return React__default.createElement(Collapse$1, Object.assign({
      className: _classes,
      cssModule: newCssModule,
      navbar: navbar,
      style: style
    }, attributes), React__default.createElement("div", {
      className: 'overlay',
      style: style,
      onClick: onOverlayClick
    }), React__default.createElement("div", {
      className: 'close-div sr-only'
    }, React__default.createElement("button", {
      className: 'btn close-menu',
      type: 'button'
    }, React__default.createElement("span", {
      className: 'it-close'
    }), "close")), megamenu ? React__default.createElement("div", {
      className: 'menu-wrapper'
    }, children) : React__default.createElement(React__default.Fragment, null, children));
  }

  var classes = classNames(className, {
    'link-list-wrapper': header
  });
  return React__default.createElement(Collapse$1, Object.assign({
    className: classes,
    cssModule: newCssModule
  }, attributes, {
    navbar: navbar,
    isOpen: isOpen
  }), children);
};

var GridItem = function GridItem(_ref) {
  var _ref$tag = _ref.tag,
      Tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      className = _ref.className,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "className", "children"]);

  var classes = classNames('it-grid-item-wrapper', className);
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: classes
  }), children);
};

var GridItemText = function GridItemText(_ref) {
  var className = _ref.className,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "children"]);

  var classes = classNames('it-griditem-text', className);
  return React__default.createElement("span", Object.assign({}, attributes, {
    className: classes
  }), children);
};

var GridItemTextWrapper = function GridItemTextWrapper(_ref) {
  var className = _ref.className,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "children"]);

  var classes = classNames('it-griditem-text-wrapper', className);
  return React__default.createElement("span", Object.assign({}, attributes, {
    className: classes
  }), children);
};

var GridList = function GridList(_ref) {
  var className = _ref.className,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "children"]);

  var classes = classNames('it-grid-list-wrapper', className);
  return React__default.createElement("div", Object.assign({}, attributes, {
    className: classes
  }), children);
};

var GridRow = function GridRow(_ref) {
  var className = _ref.className,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "children"]);

  var classes = classNames('grid-row', className);
  return React__default.createElement("div", Object.assign({}, attributes, {
    className: classes
  }), children);
};

var SLIM = 'slim';
var CENTER = 'center';
var NAVBAR = 'navbar';
var HeaderContext = /*#__PURE__*/React__default.createContext({});

var Header = function Header(_ref) {
  var _classNames;

  var className = _ref.className,
      _ref$small = _ref.small,
      small = _ref$small === void 0 ? false : _ref$small,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? '' : _ref$theme,
      type = _ref.type,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "small", "theme", "type"]);

  // use context here as theme
  var classes = classNames(className, (_classNames = {}, _classNames["it-header-" + type + "-wrapper"] = type, _classNames['it-small-header'] = type === CENTER && small, _classNames["theme-" + theme] = type !== NAVBAR && theme, _classNames['theme-dark-mobile'] = type === NAVBAR && theme === 'dark', _classNames['theme-light-desk'] = type === NAVBAR && theme === 'light', _classNames));
  return React__default.createElement(HeaderContext.Provider, {
    value: {
      type: type
    }
  }, React__default.createElement("div", Object.assign({
    className: classes
  }, attributes)));
};

var Headers = function Headers(_ref) {
  var className = _ref.className,
      _ref$shadow = _ref.shadow,
      shadow = _ref$shadow === void 0 ? false : _ref$shadow,
      _ref$sticky = _ref.sticky,
      sticky = _ref$sticky === void 0 ? false : _ref$sticky,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "shadow", "sticky"]);

  var classes = classNames('it-header-wrapper', {
    'it-shadow': shadow,
    'it-header-sticky': sticky
  }, className);

  if (!sticky) {
    return React__default.createElement("div", Object.assign({
      className: classes
    }, attributes));
  }

  return React__default.createElement(StickyProvider, null, React__default.createElement(Sticky, {
    style: {
      position: 'sticky',
      zIndex: 2
    }
  }, React__default.createElement("div", Object.assign({
    className: classes
  }, attributes))));
};

var HeaderBrand = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(HeaderBrand, _PureComponent);

  function HeaderBrand() {
    return _PureComponent.apply(this, arguments) || this;
  }

  var _proto = HeaderBrand.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        className = _this$props.className,
        href = _this$props.href,
        iconName = _this$props.iconName,
        children = _this$props.children,
        _this$props$tag = _this$props.tag,
        tag = _this$props$tag === void 0 ? 'a' : _this$props$tag,
        _this$props$responsiv = _this$props.responsive,
        responsive = _this$props$responsiv === void 0 ? false : _this$props$responsiv,
        attributes = _objectWithoutPropertiesLoose(_this$props, ["className", "href", "iconName", "children", "tag", "responsive"]);

    var type = this.context.type;
    var defaultAttributes = {
      tag: tag
    };

    if (type !== CENTER) {
      var classes = classNames('d-lg-block', className, {
        'd-none': !responsive
      });
      return React__default.createElement(NavbarBrand, Object.assign({
        className: classes,
        href: href
      }, attributes, defaultAttributes), children);
    }

    return React__default.createElement("div", {
      className: 'it-brand-wrapper'
    }, React__default.createElement("a", {
      href: href
    }, iconName && React__default.createElement(Icon, {
      icon: iconName
    }), React__default.createElement("div", {
      className: 'it-brand-text'
    }, React__default.Children.map(children, function (child, i) {
      if (typeof child !== 'object' || child == null || !('props' in child)) {
        return child;
      } // convention here: first item is the main title, while others subtext


      var className = classNames(child.props.className, {
        'd-none d-md-block': i
      } // subtext is anything but first element
      );
      var props = {
        className: className
      };
      return React__default.cloneElement(child, props);
    }))));
  };

  return HeaderBrand;
}(PureComponent);
HeaderBrand.contextType = HeaderContext;

var HeaderContent = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(HeaderContent, _PureComponent);

  function HeaderContent() {
    return _PureComponent.apply(this, arguments) || this;
  }

  var _proto = HeaderContent.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        className = _this$props.className,
        megamenu = _this$props.megamenu,
        attributes = _objectWithoutPropertiesLoose(_this$props, ["className", "megamenu"]);

    var type = this.context.type;
    var classes = classNames(className, {
      'it-header-slim-wrapper-content': type === SLIM,
      'it-header-center-content-wrapper': type === CENTER,
      navbar: type === NAVBAR,
      'has-megamenu': megamenu
    });
    var Content = type === NAVBAR ? React__default.createElement(Navbar, Object.assign({
      className: classes
    }, attributes)) : React__default.createElement("div", Object.assign({
      className: classes
    }, attributes));
    return React__default.createElement("div", {
      className: 'container'
    }, React__default.createElement("div", {
      className: 'row'
    }, React__default.createElement("div", {
      className: 'col-12'
    }, Content)));
  };

  return HeaderContent;
}(PureComponent);
HeaderContent.contextType = HeaderContext;

var HeaderLinkZone = function HeaderLinkZone(_ref) {
  var className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className"]);

  var classes = classNames(className);
  return React__default.createElement("div", {
    className: 'nav-mobile'
  }, React__default.createElement("nav", Object.assign({
    className: classes
  }, attributes)));
};

var HeaderRightZone = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(HeaderRightZone, _PureComponent);

  function HeaderRightZone() {
    return _PureComponent.apply(this, arguments) || this;
  }

  var _proto = HeaderRightZone.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        className = _this$props.className,
        attributes = _objectWithoutPropertiesLoose(_this$props, ["className"]);

    var type = this.context.type;
    var classes = classNames(className, {
      // BI >= 1.3.6
      'it-header-slim-right-zone': type === SLIM,
      // BI < 1.3.6
      'header-slim-right-zone': type === SLIM,
      'it-right-zone': type !== SLIM
    });
    return React__default.createElement("div", Object.assign({
      className: classes
    }, attributes));
  };

  return HeaderRightZone;
}(PureComponent);
HeaderRightZone.contextType = HeaderContext;

var HeaderSearch = function HeaderSearch(_ref) {
  var className = _ref.className,
      label = _ref.label,
      href = _ref.href,
      _ref$iconName = _ref.iconName,
      iconName = _ref$iconName === void 0 ? 'it-search' : _ref$iconName,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "label", "href", "iconName"]);

  var classes = classNames('it-search-wrapper', className);
  return React__default.createElement("div", Object.assign({
    className: classes
  }, attributes), label && React__default.createElement("span", {
    className: 'd-none d-md-block'
  }, label), React__default.createElement("a", {
    className: 'search-link rounded-icon',
    "aria-label": label,
    href: href
  }, React__default.createElement(Icon, {
    icon: iconName
  })));
};

var HeaderSocialsZone = function HeaderSocialsZone(_ref) {
  var className = _ref.className,
      children = _ref.children,
      label = _ref.label,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "children", "label"]);

  var classes = classNames('it-socials d-none d-md-flex', className);
  return React__default.createElement("div", Object.assign({
    className: classes
  }, attributes), label && React__default.createElement("span", null, label), children);
};

var HeaderToggler = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(HeaderToggler, _PureComponent);

  function HeaderToggler() {
    return _PureComponent.apply(this, arguments) || this;
  }

  var _proto = HeaderToggler.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        className = _this$props.className,
        tag = _this$props.tag,
        type = _this$props.type,
        attributes = _objectWithoutPropertiesLoose(_this$props, ["className", "tag", "type"]);

    var HeaderType = this.context.type;
    var BUTTON = 'button';
    var defaultTag = HeaderType === SLIM ? 'a' : BUTTON;
    var defaultType = HeaderType === SLIM ? undefined : BUTTON;
    var classes = classNames({
      'it-opener d-lg-none': HeaderType === SLIM,
      'custom-navbar-toggler': HeaderType === NAVBAR
    }, className);
    return React__default.createElement(NavbarToggler, Object.assign({
      className: classes
    }, attributes, {
      tag: tag || defaultTag,
      type: type || defaultType,
      href: '#'
    }));
  };

  return HeaderToggler;
}(PureComponent);
HeaderToggler.contextType = HeaderContext;

var Hero = function Hero(_ref) {
  var _classname;

  var _ref$tag = _ref.tag,
      Tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      small = _ref.small,
      centered = _ref.centered,
      overlay = _ref.overlay,
      overlap = _ref.overlap,
      className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "small", "centered", "overlay", "overlap", "className"]);

  var classes = classNames('it-hero-wrapper', className, (_classname = {
    'it-overlay': overlay
  }, _classname['it-' + overlay] = overlay, _classname['it-hero-small-size'] = small, _classname['it-text-centered'] = centered, _classname['it-bottom-overlapping-content'] = overlap, _classname));
  return React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes));
};

var HeroBackground = function HeroBackground(_ref) {
  var alt = _ref.alt,
      attributes = _objectWithoutPropertiesLoose(_ref, ["alt"]);

  return React__default.createElement("div", {
    className: 'img-responsive-wrapper'
  }, React__default.createElement("div", {
    className: 'img-responsive'
  }, React__default.createElement("div", {
    className: 'img-wrapper'
  }, React__default.createElement("img", Object.assign({}, attributes, {
    alt: alt
  })))));
};

var HeroBody = function HeroBody(_ref) {
  var children = _ref.children,
      className = _ref.className;
  var classes = classNames('it-hero-text-wrapper', 'bg-dark', className);
  return React__default.createElement(Container, null, React__default.createElement(Row, null, React__default.createElement(Col, null, React__default.createElement("div", {
    className: classes
  }, children))));
};

var HeroButton = function HeroButton(_ref) {
  var wrapperClassName = _ref.wrapperClassName,
      attributes = _objectWithoutPropertiesLoose(_ref, ["wrapperClassName"]);

  var classes = classNames('it-btn-container', wrapperClassName);
  return React__default.createElement("div", {
    className: classes
  }, React__default.createElement(Button, Object.assign({
    size: 'sm'
  }, attributes)));
};

var HeroCategory = function HeroCategory(_ref) {
  var className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className"]);

  var classes = classNames('it-category', className);
  return React__default.createElement("span", Object.assign({}, attributes, {
    className: classes
  }));
};

var HeroTitle = function HeroTitle(_ref) {
  var _ref$tag = _ref.tag,
      Tag = _ref$tag === void 0 ? 'h1' : _ref$tag,
      className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "className"]);

  var classes = classNames(className);
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: classes
  }));
};

var InputContainer = function InputContainer(_ref) {
  var id = _ref.id,
      infoId = _ref.infoId,
      activeClass = _ref.activeClass,
      label = _ref.label,
      infoTextClass = _ref.infoTextClass,
      infoText = _ref.infoText,
      wrapperClass = _ref.wrapperClass,
      children = _ref.children;
  return React__default.createElement("div", {
    className: wrapperClass
  }, children, React__default.createElement("label", {
    htmlFor: id,
    className: activeClass
  }, label), React__default.createElement("small", {
    id: infoId,
    className: infoTextClass
  }, infoText));
};

var mapToCssModules = Util.mapToCssModules;

function getFormControlClassInternal(_ref) {
  var plaintext = _ref.plaintext,
      staticInput = _ref.staticInput,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'text' : _ref$type,
      addon = _ref.addon,
      normalized = _ref.normalized;
  var formControlClass = 'form-control';

  if (plaintext || staticInput || normalized) {
    return formControlClass + "-plaintext";
  }

  if (type === 'file') {
    return formControlClass + "-file";
  }

  if (['radio', 'checkbox'].indexOf(type) > -1) {
    if (addon) {
      return null;
    }
  }

  return formControlClass;
}

function getFormControlClass(props, cssModule) {
  return mapToCssModules(getFormControlClassInternal(props), cssModule);
}
function getInfoTextControlClass(_ref2, cssModule) {
  var valid = _ref2.valid,
      invalid = _ref2.invalid;
  return mapToCssModules(classNames({
    'form-text': valid || invalid,
    'text-muted': !valid || invalid
  }), cssModule);
}
function getTag(_ref3) {
  var tag = _ref3.tag,
      plaintext = _ref3.plaintext,
      staticInput = _ref3.staticInput,
      _ref3$type = _ref3.type,
      type = _ref3$type === void 0 ? 'text' : _ref3$type;

  if (tag) {
    return tag;
  }

  if (['radio', 'checkbox'].indexOf(type) > -1) {
    return 'input';
  }

  if (plaintext || staticInput) {
    return 'p';
  }

  return 'input';
}
function getClasses(className, _ref4, cssModule) {
  var _classNames;

  var isFocused = _ref4.isFocused,
      valid = _ref4.valid,
      invalid = _ref4.invalid,
      bsSize = _ref4.bsSize,
      placeholder = _ref4.placeholder,
      value = _ref4.value,
      label = _ref4.label,
      infoText = _ref4.infoText,
      normalized = _ref4.normalized,
      inputPassword = _ref4.inputPassword,
      formControlClass = _ref4.formControlClass,
      infoTextControlClass = _ref4.infoTextControlClass,
      originalWrapperClass = _ref4.originalWrapperClass;
  var hasPlainCondition = placeholder || label || infoText;
  var baseCondition = hasPlainCondition && !normalized && !inputPassword;
  var passwordOnlyCondition = inputPassword && !hasPlainCondition && !normalized;
  var normalizedOnlyCondition = normalized && !hasPlainCondition && !inputPassword;
  var classes = mapToCssModules(classNames(className, (_classNames = {
    'is-invalid': invalid,
    'is-valid': valid
  }, _classNames["form-control-" + bsSize] = bsSize, _classNames), formControlClass), cssModule);
  var wrapperClass = mapToCssModules(classNames(className, originalWrapperClass, 'form-group'), cssModule);
  var infoTextClass = mapToCssModules(classNames({
    'valid-feedback': valid,
    'invalid-feedback': invalid
  }, infoTextControlClass), cssModule);
  var inputClasses = mapToCssModules(classNames(classes, !baseCondition && {
    // we can model here only if stylings
    'form-control-plaintext': normalizedOnlyCondition,
    'form-control': passwordOnlyCondition,
    'input-password': passwordOnlyCondition,
    'focus--mouse': passwordOnlyCondition || normalizedOnlyCondition
  }), cssModule);
  var activeClass = mapToCssModules(classNames({
    active: isFocused || placeholder || value
  }), cssModule);
  return {
    wrapperClass: wrapperClass,
    inputClasses: inputClasses,
    activeClass: activeClass,
    infoTextClass: infoTextClass
  };
}

var noop = function noop() {};
var logError = function logError(message) {
  if (typeof console !== 'undefined') {
    if (console.error) {
      console.error(message);
    } else {
      console.log(message);
    }
  }
};
var messages = {};
var notifyDeprecation = function notifyDeprecation(message, options) {
  if (options === void 0) {
    options = {
      once: true
    };
  }

  if (!options.once) {
    logError(message);
  } else {
    if (!messages[message]) {
      logError(message);
      messages[message] = 1;
    }
  }
};

var Input = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Input, _React$Component);

  function Input() {
    var _this;

    _this = _React$Component.apply(this, arguments) || this;
    _this.state = {
      isFocused: false,
      hidden: true,
      icon: true
    };

    _this.toggleFocusLabel = function (e) {
      _this.setState({
        isFocused: true
      });

      _this.props.onFocus == null ? void 0 : _this.props.onFocus(e);
    };

    _this.toggleBlurLabel = function (e) {
      if (e.target.value === '') {
        _this.setState({
          isFocused: !_this.state.isFocused
        });
      }

      _this.props.onBlur == null ? void 0 : _this.props.onBlur(e);
    };

    _this.toggleShow = function () {
      _this.setState({
        hidden: !_this.state.hidden,
        icon: !_this.state.icon
      });
    };

    return _this;
  }

  var _proto = Input.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        id = _this$props.id,
        className = _this$props.className,
        cssModule = _this$props.cssModule,
        type = _this$props.type,
        state = _this$props.state,
        tag = _this$props.tag,
        addon = _this$props.addon,
        staticInput = _this$props.static,
        plaintext = _this$props.plaintext,
        innerRef = _this$props.innerRef,
        label = _this$props.label,
        infoText = _this$props.infoText,
        placeholder = _this$props.placeholder,
        normalized = _this$props.normalized,
        value = _this$props.value,
        originalWrapperClassOld = _this$props.wrapperClass,
        originalWrapperClass = _this$props.wrapperClassName,
        size = _this$props.size,
        _this$props$noWrapper = _this$props.noWrapper,
        noWrapper = _this$props$noWrapper === void 0 ? false : _this$props$noWrapper,
        attributes = _objectWithoutPropertiesLoose(_this$props, ["id", "className", "cssModule", "type", "state", "tag", "addon", "static", "plaintext", "innerRef", "label", "infoText", "placeholder", "normalized", "value", "wrapperClass", "wrapperClassName", "size", "noWrapper"]);

    var bsSize = attributes.bsSize,
        valid = attributes.valid,
        invalid = attributes.invalid,
        rest = _objectWithoutPropertiesLoose(attributes, ["bsSize", "valid", "invalid"]);

    var Tag = getTag({
      tag: tag,
      plaintext: plaintext,
      staticInput: staticInput,
      type: type
    });
    var formControlClass = getFormControlClass({
      plaintext: plaintext,
      staticInput: staticInput,
      type: type,
      addon: addon,
      normalized: normalized
    }, cssModule);
    var infoTextControlClass = getInfoTextControlClass({
      valid: valid,
      invalid: invalid
    }, cssModule);

    if (state && valid == null && invalid == null) {
      invalid = state === 'danger';
      valid = state === 'success';
    }

    var extraAttributes = {};

    if (size && !isNumber(size)) {
      notifyDeprecation('Please use the prop "bsSize" instead of the "size" to bootstrap\'s input sizing.');
      bsSize = size;
    } else {
      extraAttributes.size = size;
    }

    if (Tag === 'input' || typeof tag !== 'string') {
      extraAttributes.type = type;
    } // associate the input field with the help text


    var infoId = id ? id + "Description" : undefined;

    if (id) {
      extraAttributes['aria-describedby'] = infoId;
    }

    if (attributes.children && !(plaintext || staticInput || type === 'select' || typeof Tag !== 'string' || Tag === 'select')) {
      notifyDeprecation("Input with a type of \"" + type + "\" cannot have children. Please use \"value\"/\"defaultValue\" instead.");
      delete attributes.children;
    }

    var inputPassword = extraAttributes.type === 'password'; // Styling

    var _getClasses = getClasses(className, {
      valid: valid,
      invalid: invalid,
      bsSize: bsSize,
      placeholder: placeholder,
      value: value,
      label: label,
      infoText: infoText,
      normalized: Boolean(normalized),
      inputPassword: inputPassword,
      formControlClass: formControlClass,
      infoTextControlClass: infoTextControlClass,
      isFocused: this.state.isFocused,
      originalWrapperClass: originalWrapperClass || originalWrapperClassOld
    }, cssModule),
        activeClass = _getClasses.activeClass,
        infoTextClass = _getClasses.infoTextClass,
        inputClasses = _getClasses.inputClasses,
        wrapperClass = _getClasses.wrapperClass; // set of attributes always shared by the Input components


    var sharedAttributes = {
      id: id,
      onFocus: this.toggleFocusLabel,
      onBlur: this.toggleBlurLabel,
      value: value,
      ref: innerRef
    }; // set of attributes always shared by the wrapper component

    var containerProps = {
      id: id,
      infoId: infoId,
      activeClass: activeClass,
      label: label,
      infoTextClass: infoTextClass,
      infoText: infoText,
      wrapperClass: wrapperClass
    };

    if (noWrapper) {
      return React__default.createElement(Tag, Object.assign({}, rest, extraAttributes, {
        className: inputClasses
      }, sharedAttributes, {
        placeholder: placeholder
      }));
    }

    if (placeholder) {
      return React__default.createElement(InputContainer, Object.assign({}, containerProps), React__default.createElement(Tag, Object.assign({}, rest, extraAttributes, sharedAttributes, {
        className: inputClasses,
        placeholder: placeholder
      })));
    }

    if (inputPassword) {
      return React__default.createElement(InputContainer, Object.assign({}, containerProps), React__default.createElement(Tag, Object.assign({}, rest, extraAttributes, sharedAttributes, {
        type: this.state.hidden ? 'password' : 'text',
        className: inputClasses,
        placeholder: placeholder
      })), React__default.createElement("span", {
        className: 'password-icon',
        "aria-hidden": 'true'
      }, React__default.createElement(Icon, {
        size: 'sm',
        icon: "it-password-" + (this.state.icon ? 'visible' : 'invisible'),
        className: 'password-icon-visible',
        onClick: this.toggleShow
      })));
    }

    if (normalized) {
      return React__default.createElement(InputContainer, Object.assign({}, containerProps), React__default.createElement(Tag, Object.assign({}, rest, extraAttributes, sharedAttributes, {
        className: inputClasses,
        readOnly: true
      })));
    }

    if (label || infoText) {
      return React__default.createElement(InputContainer, Object.assign({}, containerProps), React__default.createElement(Tag, Object.assign({}, rest, extraAttributes, sharedAttributes, {
        className: inputClasses
      })));
    }

    return React__default.createElement(Tag, Object.assign({}, rest, extraAttributes, {
      className: inputClasses
    }, sharedAttributes));
  };

  return Input;
}(React__default.Component);

var TextArea = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(TextArea, _React$Component);

  function TextArea() {
    var _this;

    _this = _React$Component.apply(this, arguments) || this;
    _this.state = {
      isFocused: false,
      hidden: true,
      icon: true
    };

    _this.toggleFocusLabel = function () {
      _this.setState({
        isFocused: true
      });
    };

    _this.toggleBlurLabel = function (e) {
      if (e.target.value === '') {
        _this.setState({
          isFocused: !_this.state.isFocused
        });
      }
    };

    _this.toggleShow = function () {
      _this.setState({
        hidden: !_this.state.hidden,
        icon: !_this.state.icon
      });
    };

    return _this;
  }

  var _proto = TextArea.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        id = _this$props.id,
        className = _this$props.className,
        cssModule = _this$props.cssModule,
        innerRef = _this$props.innerRef,
        label = _this$props.label,
        infoText = _this$props.infoText,
        placeholder = _this$props.placeholder,
        normalized = _this$props.normalized,
        value = _this$props.value,
        originalWrapperClass = _this$props.wrapperClassName,
        valid = _this$props.valid,
        invalid = _this$props.invalid,
        attributes = _objectWithoutPropertiesLoose(_this$props, ["id", "className", "cssModule", "innerRef", "label", "infoText", "placeholder", "normalized", "value", "wrapperClassName", "valid", "invalid"]);

    var infoTextControlClass = getInfoTextControlClass({
      valid: valid,
      invalid: invalid
    }, cssModule);
    var extraAttributes = {}; // associate the input field with the help text

    var infoId = id ? id + "Description" : undefined;

    if (id) {
      extraAttributes['aria-describedby'] = infoId;
    } // Styling


    var _getClasses = getClasses(className, {
      valid: valid,
      invalid: invalid,
      placeholder: placeholder,
      value: value,
      label: label,
      infoText: infoText,
      normalized: Boolean(normalized),
      infoTextControlClass: infoTextControlClass,
      isFocused: this.state.isFocused,
      originalWrapperClass: originalWrapperClass
    }, cssModule),
        activeClass = _getClasses.activeClass,
        infoTextClass = _getClasses.infoTextClass,
        inputClasses = _getClasses.inputClasses,
        wrapperClass = _getClasses.wrapperClass; // set of attributes always shared by the Input components


    var sharedAttributes = {
      id: id,
      onFocus: this.toggleFocusLabel,
      onBlur: this.toggleBlurLabel,
      value: value,
      ref: innerRef
    }; // set of attributes always shared by the wrapper component

    var containerProps = {
      id: id,
      infoId: infoId,
      activeClass: activeClass,
      label: label,
      infoTextClass: infoTextClass,
      infoText: infoText,
      wrapperClass: wrapperClass
    };

    if (placeholder) {
      return React__default.createElement(InputContainer, Object.assign({}, containerProps), React__default.createElement("textarea", Object.assign({}, attributes, extraAttributes, sharedAttributes, {
        className: inputClasses,
        placeholder: placeholder
      })));
    }

    if (normalized) {
      return React__default.createElement(InputContainer, Object.assign({}, containerProps), React__default.createElement("textarea", Object.assign({}, attributes, extraAttributes, sharedAttributes, {
        className: inputClasses,
        readOnly: true
      })));
    }

    if (label || infoText) {
      return React__default.createElement(InputContainer, Object.assign({}, containerProps), React__default.createElement("textarea", Object.assign({}, attributes, extraAttributes, sharedAttributes, {
        className: inputClasses
      })));
    }

    return React__default.createElement("textarea", Object.assign({}, attributes, extraAttributes, {
      ref: innerRef,
      className: inputClasses
    }, sharedAttributes));
  };

  return TextArea;
}(React__default.Component);

var LinkList = function LinkList(_ref) {
  var className = _ref.className,
      wrapperClassName = _ref.wrapperClassName,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      multiline = _ref.multiline,
      header = _ref.header,
      sublist = _ref.sublist,
      avatar = _ref.avatar,
      noWrapper = _ref.noWrapper,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "wrapperClassName", "tag", "multiline", "header", "sublist", "avatar", "noWrapper"]);

  var Tag = tag;
  var wrapperClasses = classNames('link-list-wrapper', wrapperClassName, {
    multiline: multiline
  });
  var classes = classNames(className, {
    'link-list': !sublist,
    'link-sublist': sublist,
    'avatar-group': avatar
  });

  if (noWrapper) {
    return React__default.createElement("ul", Object.assign({}, attributes, {
      className: classes
    }));
  }

  if (sublist) {
    return React__default.createElement(React__default.Fragment, null, header, React__default.createElement("ul", Object.assign({}, attributes, {
      className: classes
    })));
  }

  return React__default.createElement(Tag, {
    className: wrapperClasses
  }, header, React__default.createElement("ul", Object.assign({}, attributes, {
    className: classes
  })));
};

var handleDisabledOnClick = function handleDisabledOnClick(e) {
  e.preventDefault();
};

var LinkListItem = function LinkListItem(_ref) {
  var className = _ref.className,
      active = _ref.active,
      disabled = _ref.disabled,
      header = _ref.header,
      divider = _ref.divider,
      href = _ref.href,
      size = _ref.size,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'a' : _ref$tag,
      wrapperClassName = _ref.wrapperClassName,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "active", "disabled", "header", "divider", "href", "size", "tag", "wrapperClassName", "children"]);

  var Tag = tag;
  var classes = classNames(className, {
    active: active,
    disabled: disabled,
    header: header,
    divider: divider,
    size: size
  }, 'list-item'); // Prevent click event when disabled.

  var handlers = {};

  if (disabled) {
    handlers.onClick = handleDisabledOnClick;
  }

  if (header) {
    Tag = 'h3';
  } else if (divider) {
    Tag = 'span';
  }

  if (header && href) {
    return React__default.createElement("li", {
      className: wrapperClassName
    }, React__default.createElement(Tag, null, React__default.createElement("a", Object.assign({
      href: href || '#'
    }, attributes, {
      className: classes
    }, handlers), children)));
  }

  return React__default.createElement("li", {
    className: wrapperClassName
  }, React__default.createElement(Tag, Object.assign({}, attributes, {
    className: classes,
    href: href
  }, handlers), children));
};

var Nav = function Nav(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'ul' : _ref$tag,
      _ref$vertical = _ref.vertical,
      vertical = _ref$vertical === void 0 ? false : _ref$vertical,
      secondary = _ref.secondary,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag", "vertical", "secondary"]);

  var classes = classNames(className, {
    'navbar-secondary': secondary
  });
  return React__default.createElement(Nav$1, Object.assign({
    className: classes,
    tag: tag,
    vertical: vertical
  }, attributes));
};

var Megamenu = function Megamenu(_ref) {
  var brand = _ref.brand,
      className = _ref.className,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["brand", "className", "children"]);

  var _useState = useState(false),
      openNav = _useState[0],
      setOpenNav = _useState[1];

  var toggle = function toggle() {
    setOpenNav(!openNav);
  };

  var classes = classNames(className, 'has-megamenu');
  return React__default.createElement(Navbar, Object.assign({
    className: classes
  }, attributes), React__default.createElement(NavbarToggler, {
    className: 'custom-navbar-toggler',
    onClick: toggle
  }, React__default.createElement(Icon, {
    icon: 'it-list',
    size: 'sm'
  })), brand, React__default.createElement(Collapse, {
    isOpen: openNav,
    megamenu: true
  }, React__default.createElement(Nav, {
    navbar: true
  }, children)));
};

var MegamenuItem = function MegamenuItem(_ref) {
  var itemName = _ref.itemName,
      className = _ref.className,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["itemName", "className", "children"]);

  var classes = classNames(className, 'megamenu');
  return React__default.createElement(UncontrolledDropdown, Object.assign({
    nav: true,
    tag: 'li',
    className: classes
  }, attributes), React__default.createElement(DropdownToggle, {
    caret: true,
    nav: true
  }, itemName), React__default.createElement(DropdownMenu, {
    positionFixed: true
  }, children));
};

var MegamenuFooter = function MegamenuFooter(_ref) {
  var className = _ref.className,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "children"]);

  var classes = classNames(className, 'it-megamenu-footer');
  return React__default.createElement("div", Object.assign({
    className: classes
  }, attributes), children);
};

var MegamenuHighlightColumn = function MegamenuHighlightColumn(_ref) {
  var description = _ref.description,
      className = _ref.className,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["description", "className", "children"]);

  var classes = classNames(className, 'it-vertical', {
    'it-description': description
  });
  return React__default.createElement(Col, Object.assign({}, attributes), React__default.createElement(Row, {
    className: 'max-height-col'
  }, React__default.createElement(Col, {
    className: classes
  }, description ? React__default.createElement("div", {
    className: 'description-content'
  }, children) : React__default.createElement(React__default.Fragment, null, children))));
};

var Modal = function Modal(_ref) {
  var withIcon = _ref.withIcon,
      withLinkList = _ref.withLinkList,
      popConfirm = _ref.popConfirm,
      modalClassName = _ref.modalClassName,
      align = _ref.align,
      scrollable = _ref.scrollable,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, ["withIcon", "withLinkList", "popConfirm", "modalClassName", "align", "scrollable", "className"]);

  var isAligned = align != null && ['left', 'right'].includes(align);
  var modalDialogClassnames = classNames(modalClassName, {
    'alert-modal': withIcon,
    'it-dialog-link-list': withLinkList,
    'popconfirm-modal': popConfirm,
    'it-dialog-scrollable': scrollable && isAligned
  });
  var modalClassnames = classNames(className, {
    'modal-dialog-left': align === 'left',
    'modal-dialog-right': align === 'right'
  });
  return React__default.createElement(Modal$1, Object.assign({}, props, {
    scrollable: !isAligned && scrollable,
    className: modalClassnames,
    modalClassName: modalDialogClassnames
  }));
};

var mapToCssModules$1 = Util.mapToCssModules;
var ModalHeader = function ModalHeader(_ref) {
  var icon = _ref.icon,
      className = _ref.className,
      children = _ref.children,
      toggle = _ref.toggle,
      _ref$tag = _ref.tag,
      Tag = _ref$tag === void 0 ? 'h5' : _ref$tag,
      _ref$wrapTag = _ref.wrapTag,
      WrapTag = _ref$wrapTag === void 0 ? 'div' : _ref$wrapTag,
      _ref$closeAriaLabel = _ref.closeAriaLabel,
      closeAriaLabel = _ref$closeAriaLabel === void 0 ? 'Close' : _ref$closeAriaLabel,
      close = _ref.close,
      _ref$charCode = _ref.charCode,
      charCode = _ref$charCode === void 0 ? 215 : _ref$charCode,
      cssModule = _ref.cssModule,
      props = _objectWithoutPropertiesLoose(_ref, ["icon", "className", "children", "Util", "toggle", "tag", "wrapTag", "closeAriaLabel", "close", "charCode", "cssModule"]);

  var classes = mapToCssModules$1(classNames(className, 'modal-header'), cssModule);
  var CloseButton;

  if (!close && toggle) {
    var closeIcon = typeof charCode === 'number' ? String.fromCharCode(charCode) : charCode;
    CloseButton = React__default.createElement("button", {
      type: 'button',
      onClick: toggle,
      className: mapToCssModules$1('close', cssModule),
      "aria-label": closeAriaLabel
    }, React__default.createElement("span", {
      "aria-hidden": true
    }, closeIcon));
  }

  return React__default.createElement(WrapTag, Object.assign({}, props, {
    className: classes
  }), icon != null ? React__default.createElement(Icon, {
    icon: icon
  }) : null, React__default.createElement(Tag, {
    className: mapToCssModules$1('modal-title', cssModule)
  }, children), close || CloseButton);
};

var ModalBody = function ModalBody(props) {
  return React__default.createElement(ModalBody$1, Object.assign({}, props));
};

var ModalFooter = function ModalFooter(props) {
  return React__default.createElement(ModalFooter$1, Object.assign({}, props));
};

var Pager = function Pager(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'nav' : _ref$tag,
      _ref$listTag = _ref.listTag,
      ListTag = _ref$listTag === void 0 ? 'ul' : _ref$listTag,
      listClassName = _ref.listClassName,
      children = _ref.children,
      total = _ref.total,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag", "listTag", "listClassName", "children", "total"]);

  var Tag = tag;
  var classes = classNames(className, 'pagination-wrapper', {
    'pagination-total': total
  });
  var listClasses = classNames(listClassName, 'pagination');

  var _ref2 = total || {},
      ariaLabel = _ref2.ariaLabel,
      label = _ref2.label;

  var totalAriaLabel = ariaLabel ? React__default.createElement("span", {
    className: 'sr-only'
  }, ariaLabel) : null;
  return React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes), React__default.createElement(ListTag, {
    className: listClasses
  }, children), total ? React__default.createElement("p", null, totalAriaLabel, label) : null);
};

var isCustomLegendObject = function isCustomLegendObject(legend) {
  return legend != null && typeof legend === 'object' && 'content' in legend;
};
var Rating = function Rating(_ref) {
  var className = _ref.className,
      inputs = _ref.inputs,
      legend = _ref.legend,
      name = _ref.name,
      readOnly = _ref.readOnly,
      value = _ref.value,
      wrapperClassName = _ref.wrapperClassName,
      _ref$labelTemplate = _ref.labelTemplate,
      labelTemplate = _ref$labelTemplate === void 0 ? function (value) {
    return "Valuta " + value + " stelle su 5";
  } : _ref$labelTemplate,
      _ref$onChangeRating = _ref.onChangeRating,
      onChangeRating = _ref$onChangeRating === void 0 ? noop : _ref$onChangeRating,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "inputs", "legend", "name", "readOnly", "value", "wrapperClassName", "labelTemplate", "onChangeRating"]);

  // Input data
  // On the DOM we have to go from 5 to 1
  var safeInputs = (inputs || []).reverse(); // Fields

  var labelFn = labelTemplate;

  var _onChange = readOnly ? noop : onChangeRating;

  var wrapperClasses = classNames(wrapperClassName, {
    'rating-read-only': readOnly,
    'rating-label': legend
  });
  var fieldClasses = classNames(className);
  var extraFieldAttrs = readOnly ? {
    'aria-hidden': true
  } : {}; // Legend

  var isLegendString = typeof legend === 'string';
  var legendClass = '';
  var legendText = legend;

  if (isCustomLegendObject(legend)) {
    legendClass = classNames({
      'sr-only': legend.srOnly
    });
    legendText = legend.content;
  }

  var legendContent = isCustomLegendObject(legend) || isLegendString ? React__default.createElement("legend", {
    className: legendClass
  }, legendText) : legend;
  return React__default.createElement(FormGroup, Object.assign({
    cssModule: {
      'form-group': 'rating'
    },
    tag: 'fieldset',
    className: wrapperClasses
  }, attributes), legend && legendContent, safeInputs.map(function (id, i) {
    var currentValue = 5 - i;
    return React__default.createElement(Fragment, {
      key: id
    }, React__default.createElement(Input, Object.assign({
      type: 'radio',
      id: id,
      name: name,
      value: String(currentValue),
      cssModule: {
        'form-control': ' '
      },
      className: fieldClasses,
      onChange: function onChange() {
        return _onChange(currentValue, name);
      },
      checked: value === currentValue,
      disabled: readOnly
    }, extraFieldAttrs)), React__default.createElement(Label, {
      className: 'full',
      for: id
    }, React__default.createElement(Icon, {
      icon: 'it-star-full',
      size: 'sm'
    }), React__default.createElement("span", {
      className: 'sr-only'
    }, labelFn(currentValue))));
  }));
};

var ResponsiveImage = function ResponsiveImage(_ref) {
  var alt = _ref.alt,
      attributes = _objectWithoutPropertiesLoose(_ref, ["alt"]);

  return React__default.createElement("div", {
    className: 'img-responsive-wrapper'
  }, React__default.createElement("div", {
    className: 'img-responsive'
  }, React__default.createElement("div", {
    className: 'img-wrapper'
  }, React__default.createElement("img", Object.assign({}, attributes, {
    alt: alt
  })))));
};

var PasswordInput = /*#__PURE__*/function (_Component) {
  _inheritsLoose(PasswordInput, _Component);

  function PasswordInput() {
    var _this;

    _this = _Component.apply(this, arguments) || this;
    _this.state = {
      showPassword: false
    };

    _this.onPasswordToggle = function () {
      _this.setState(function (prevState) {
        return {
          showPassword: !prevState.showPassword
        };
      });
    };

    return _this;
  }

  var _proto = PasswordInput.prototype;

  _proto.render = function render() {
    var showPassword = this.state.showPassword;

    var _this$props = this.props,
        _this$props$type = _this$props.type,
        type = _this$props$type === void 0 ? 'password' : _this$props$type,
        rest = _objectWithoutPropertiesLoose(_this$props, ["type"]);

    var className = classNames('btn-eye', {
      'eye-off': showPassword,
      'eye-on': !showPassword
    });
    return React__default.createElement(Fragment, null, React__default.createElement("span", {
      className: className,
      onClick: this.onPasswordToggle
    }), React__default.createElement(Input, Object.assign({}, rest, {
      type: showPassword ? 'text' : type
    })));
  };

  return PasswordInput;
}(Component);

var Skiplink = function Skiplink(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag"]);

  var Tag = tag;
  var classes = classNames(className, 'skiplinks');
  return React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes));
};

var SkiplinkItem = function SkiplinkItem(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'a' : _ref$tag,
      _ref$focusable = _ref.focusable,
      focusable = _ref$focusable === void 0 ? true : _ref$focusable,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag", "focusable"]);

  var Tag = tag;
  var classes = classNames(className, 'sr-only', {
    'sr-only-focusable': focusable
  }); // Add an extra href for focusable if the user passes an onClick rather than href prop

  var extraHref = attributes.onClick ? {
    href: '#'
  } : {};
  return React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes, extraHref));
};

var Toggle = function Toggle(_ref) {
  var label = _ref.label,
      rest = _objectWithoutPropertiesLoose(_ref, ["label"]);

  return React__default.createElement("div", {
    className: 'toggles'
  }, React__default.createElement(Label, {
    check: true
  }, label, React__default.createElement(Input$1, Object.assign({}, rest, {
    type: 'checkbox'
  })), React__default.createElement("span", {
    className: 'lever'
  })));
};

var Sidebar = function Sidebar(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      _ref$secondary = _ref.secondary,
      secondary = _ref$secondary === void 0 ? false : _ref$secondary,
      _ref$left = _ref.left,
      left = _ref$left === void 0 ? false : _ref$left,
      _ref$right = _ref.right,
      right = _ref$right === void 0 ? false : _ref$right,
      _ref$dark = _ref.dark,
      dark = _ref$dark === void 0 ? false : _ref$dark,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag", "secondary", "left", "right", "dark"]);

  var Tag = tag;
  var wrapperClasses = classNames('sidebar-wrapper', className, {
    'it-line-left-side': left,
    'it-line-right-side': right,
    'theme-dark': dark
  });
  var wrapperClassesLinkList = classNames('sidebar-linklist-wrapper', {
    'linklist-secondary': secondary
  });

  if (secondary) {
    return React__default.createElement(Tag, Object.assign({}, attributes, {
      className: wrapperClassesLinkList
    }));
  }

  return React__default.createElement(Tag, {
    className: wrapperClasses
  }, React__default.createElement(Tag, Object.assign({}, attributes, {
    className: wrapperClassesLinkList
  })));
};

var Progress = function Progress(_ref) {
  var _classNames;

  var wrapperClassName = _ref.wrapperClassName,
      className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      value = _ref.value,
      label = _ref.label,
      _ref$indeterminate = _ref.indeterminate,
      indeterminate = _ref$indeterminate === void 0 ? false : _ref$indeterminate,
      color = _ref.color,
      attributes = _objectWithoutPropertiesLoose(_ref, ["wrapperClassName", "className", "tag", "value", "label", "indeterminate", "color", "role"]);

  var Tag = tag;

  if (!isNumber(value) && !indeterminate) {
    logError("The passed \"value\" is not a valid number. You passed \"" + value + "\"");
  }

  var numericValue = Number(value);
  var wrapperClasses = classNames('progress-bar-wrapper');
  var secondaryWrapperClasses = classNames(wrapperClassName === true ? className : wrapperClassName, 'progress', {
    'progress-indeterminate': indeterminate,
    'progress-color': color
  });
  var classes = classNames(className, 'progress-bar', (_classNames = {}, _classNames["bg-" + color] = color, _classNames));

  if (label && numericValue) {
    return React__default.createElement(Tag, {
      className: wrapperClasses
    }, React__default.createElement("div", {
      className: 'progress-bar-label'
    }, React__default.createElement("span", {
      className: 'sr-only'
    }, label), numericValue + '%'), React__default.createElement(Tag, {
      className: secondaryWrapperClasses
    }, React__default.createElement("div", Object.assign({}, attributes, {
      className: classes,
      role: 'progressbar',
      style: {
        width: numericValue + '%'
      },
      "aria-valuenow": numericValue,
      "aria-valuemin": 0,
      "aria-valuemax": 100
    }))));
  }

  return React__default.createElement(Tag, {
    className: secondaryWrapperClasses
  }, React__default.createElement("div", {
    className: 'progress-bar-label'
  }, React__default.createElement("span", {
    className: 'sr-only'
  }, label)), React__default.createElement("div", Object.assign({}, attributes, {
    className: classes,
    role: 'progressbar',
    style: {
      width: numericValue + '%'
    },
    "aria-valuenow": numericValue,
    "aria-valuemin": 0,
    "aria-valuemax": 100
  })));
};

var Spinner = function Spinner(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'span' : _ref$tag,
      _ref$active = _ref.active,
      active = _ref$active === void 0 ? false : _ref$active,
      _ref$small = _ref.small,
      small = _ref$small === void 0 ? false : _ref$small,
      _ref$double = _ref.double,
      double = _ref$double === void 0 ? false : _ref$double,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? 'Caricamento' : _ref$label,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag", "active", "small", "double", "label"]);

  var Tag = tag;
  var wrapperClasses = classNames('progress-spinner', {
    'progress-spinner-active': active,
    'size-sm': small,
    'progress-spinner-double': double
  });
  var classes = classNames(className, 'sr-only');

  if (double) {
    return React__default.createElement(Tag, {
      className: wrapperClasses
    }, React__default.createElement("div", {
      className: 'progress-spinner-inner'
    }), React__default.createElement("div", {
      className: 'progress-spinner-inner'
    }), React__default.createElement(Tag, Object.assign({}, attributes, {
      className: classes
    }), label));
  }

  return React__default.createElement(Tag, {
    className: wrapperClasses
  }, React__default.createElement(Tag, Object.assign({}, attributes, {
    className: classes
  }), label));
};

var BottomNav = function BottomNav(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'nav' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag"]);

  var Tag = tag;
  return React__default.createElement(Tag, {
    className: 'bottom-nav'
  }, React__default.createElement("ul", Object.assign({}, attributes)));
};

var BottomNavItem = function BottomNavItem(_ref) {
  var _ref$active = _ref.active,
      active = _ref$active === void 0 ? false : _ref$active,
      badge = _ref.badge,
      _ref$alert = _ref.alert,
      alert = _ref$alert === void 0 ? false : _ref$alert,
      url = _ref.url,
      srText = _ref.srText,
      _ref$iconName = _ref.iconName,
      iconName = _ref$iconName === void 0 ? 'it-comment' : _ref$iconName,
      label = _ref.label,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'a' : _ref$tag,
      onLinkClick = _ref.onLinkClick,
      link = _ref.link,
      attributes = _objectWithoutPropertiesLoose(_ref, ["active", "badge", "alert", "url", "srText", "iconName", "label", "tag", "onLinkClick", "link"]);

  var Tag = tag;
  var activeClass = classNames({
    active: active
  });
  var badgeWrapper = Boolean(badge) && React__default.createElement("div", {
    className: 'badge-wrapper'
  }, React__default.createElement("span", {
    className: 'bottom-nav-badge'
  }, badge));
  var alertWrapper = Boolean(alert) && React__default.createElement("div", {
    className: 'badge-wrapper'
  }, React__default.createElement("span", {
    className: 'bottom-nav-alert'
  }));
  return React__default.createElement("li", Object.assign({}, attributes), React__default.createElement(Tag, {
    href: url || link || '#',
    className: activeClass,
    onClick: onLinkClick
  }, badgeWrapper, alertWrapper, React__default.createElement(Icon, {
    icon: iconName
  }), React__default.createElement("span", {
    className: 'bottom-nav-label'
  }, label, srText ? React__default.createElement("span", {
    className: 'sr-only'
  }, srText) : null)));
};

var ThumbNav = function ThumbNav(_ref) {
  var _classNames;

  var _ref$isSmall = _ref.isSmall,
      isSmall = _ref$isSmall === void 0 ? false : _ref$isSmall,
      _ref$fixedWidth = _ref.fixedWidth,
      fixedWidth = _ref$fixedWidth === void 0 ? false : _ref$fixedWidth,
      _ref$isVertical = _ref.isVertical,
      isVertical = _ref$isVertical === void 0 ? false : _ref$isVertical,
      _ref$noZoomOnHover = _ref.noZoomOnHover,
      noZoomOnHover = _ref$noZoomOnHover === void 0 ? false : _ref$noZoomOnHover,
      rowItems = _ref.rowItems,
      overlayOnHover = _ref.overlayOnHover,
      position = _ref.position,
      attributes = _objectWithoutPropertiesLoose(_ref, ["isSmall", "fixedWidth", "isVertical", "noZoomOnHover", "rowItems", "overlayOnHover", "position"]);

  var classes = classNames('thumb-nav', (_classNames = {
    'thumb-nav-fixed': fixedWidth,
    'thumb-nav-small': isSmall,
    'thumb-nav-vertical': isVertical || position === 'left' || position === 'right',
    'thumb-nav-nozoom': noZoomOnHover
  }, _classNames["thumb-nav-" + overlayOnHover] = overlayOnHover, _classNames["thumb-nav-" + position] = position, _classNames['thumb-nav-auto'] = rowItems != null, _classNames["thumb-nav-auto-" + rowItems] = rowItems != null, _classNames));
  return React__default.createElement("ul", Object.assign({
    className: classes
  }, attributes));
};

var ThumbNavItem = function ThumbNavItem(_ref) {
  var _ref$active = _ref.active,
      active = _ref$active === void 0 ? false : _ref$active,
      targetUrl = _ref.targetUrl,
      imageUrl = _ref.imageUrl,
      actionDescription = _ref.actionDescription,
      attributes = _objectWithoutPropertiesLoose(_ref, ["active", "targetUrl", "imageUrl", "actionDescription"]);

  var classes = classNames({
    active: active
  });
  return React__default.createElement("li", Object.assign({}, attributes), React__default.createElement("img", {
    src: resizer,
    className: 'thumb-nav-resizer',
    "aria-hidden": 'true',
    alt: ''
  }), React__default.createElement("a", {
    href: targetUrl,
    className: classes
  }, React__default.createElement("img", {
    src: imageUrl,
    alt: actionDescription
  })));
};

var CookieBar = function CookieBar(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "className"]);

  var Tag = tag;
  var wrapperClasses = classNames('cookiebar show', className);
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: wrapperClasses
  }));
};

var CookieBarButtons = function CookieBarButtons(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag"]);

  var Tag = tag;
  var buttonClasses = classNames(className, 'cookiebar-buttons');
  return React__default.createElement(Tag, Object.assign({
    className: buttonClasses
  }, attributes));
};

var CookieBarButton = function CookieBarButton(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'button' : _ref$tag,
      className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "className"]);

  var Tag = tag;
  var activeClass = classNames(className, 'cookiebar-btn');
  return React__default.createElement(Tag, Object.assign({
    className: activeClass
  }, attributes));
};

var Chip = function Chip(_ref) {
  var _classNames;

  var className = _ref.className,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? '' : _ref$color,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      _ref$simple = _ref.simple,
      simple = _ref$simple === void 0 ? false : _ref$simple,
      _ref$large = _ref.large,
      large = _ref$large === void 0 ? false : _ref$large,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "color", "tag", "simple", "large", "disabled"]);

  var Tag = tag;
  var classes = classNames('chip', className, (_classNames = {
    'chip-simple': simple,
    'chip-lg': large,
    'chip-disabled': disabled
  }, _classNames["chip-" + color] = color, _classNames));
  return React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes));
};

var ChipLabel = function ChipLabel(_ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'span' : _ref$tag,
      attributes = _objectWithoutPropertiesLoose(_ref, ["className", "tag"]);

  var Tag = tag;
  var classes = classNames(className, 'chip-label');
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: classes
  }));
};

var defaultFonts = ['Titillium Web:300,400,600,700:latin-ext', 'Lora:400,700:latin-ext', 'Roboto Mono:400,700:latin-ext'];
var FontLoader = /*#__PURE__*/function (_Component) {
  _inheritsLoose(FontLoader, _Component);

  function FontLoader() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = FontLoader.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (typeof window !== 'undefined') {
      var WebFont = require('webfontloader');

      WebFont.load({
        custom: {
          families: [].concat(defaultFonts, this.props.fonts || [])
        }
      });
    }
  };

  _proto.render = function render() {
    return null;
  };

  return FontLoader;
}(Component);

var Dimmer = function Dimmer(_ref) {
  var _classNames;

  var icon = _ref.icon,
      color = _ref.color,
      className = _ref.className,
      wrapperClassName = _ref.wrapperClassName,
      attributes = _objectWithoutPropertiesLoose(_ref, ["icon", "color", "className", "wrapperClassName"]);

  var children = attributes.children,
      rest = _objectWithoutPropertiesLoose(attributes, ["children"]);

  var classes = classNames('dimmer', wrapperClassName === true ? className : wrapperClassName, (_classNames = {}, _classNames["dimmer-" + color] = color, _classNames));
  var innerClasses = classNames('dimmer-inner', className);
  var dimmerIcon = icon && React__default.createElement("div", {
    className: 'dimmer-icon'
  }, React__default.createElement(Icon, {
    icon: icon
  }));
  return React__default.createElement("div", Object.assign({
    className: classes
  }, rest, {
    style: {
      display: 'flex'
    }
  }), React__default.createElement("div", Object.assign({
    className: innerClasses
  }, rest), dimmerIcon, children));
};

var DimmerButtons = function DimmerButtons(_ref) {
  var className = _ref.className,
      _ref$single = _ref.single,
      single = _ref$single === void 0 ? false : _ref$single,
      _ref$dark = _ref.dark,
      dark = _ref$dark === void 0 ? true : _ref$dark,
      attributes = _objectWithoutPropertiesLoose(_ref, ["color", "className", "single", "dark"]);

  var children = attributes.children,
      rest = _objectWithoutPropertiesLoose(attributes, ["children"]);

  var classes = classNames('dimmer-buttons', className, {
    'bg-dark': dark,
    'single-button': single
  });
  return React__default.createElement("div", Object.assign({
    className: classes
  }, rest), children);
};

var addTime = function addTime(value, maxValue) {
  var currTime = Number(value);
  return currTime >= maxValue ? value : (currTime + 1).toString();
};
var subtractTime = function subtractTime(value, minValue) {
  var currTime = Number(value);
  return currTime <= minValue ? value : (currTime - 1).toString();
};
var formatTime = function formatTime(value) {
  return ("0" + value).substr(-2);
};

var TimeInputContainer = function TimeInputContainer(_ref) {
  var wrapperClass = _ref.wrapperClass,
      children = _ref.children,
      label = _ref.label,
      id = _ref.id,
      infoText = _ref.infoText,
      button = _ref.button,
      infoTextClass = _ref.infoTextClass,
      invalid = _ref.invalid;
  var infoId = id ? id + "Description" : undefined;
  var activeClass = 'active';
  return React__default.createElement("div", {
    className: classNames(wrapperClass)
  }, React__default.createElement("div", {
    className: 'input-group'
  }, children, React__default.createElement("label", {
    htmlFor: id,
    className: classNames(activeClass, {
      'error-label': invalid
    })
  }, label), React__default.createElement("small", {
    id: infoId,
    className: infoTextClass
  }, infoText), React__default.createElement("div", {
    className: 'input-group-append'
  }, button)));
};

var TimeInput = function TimeInput(_ref2) {
  var _ref2$dark = _ref2.dark,
      dark = _ref2$dark === void 0 ? false : _ref2$dark,
      _ref2$onBlur = _ref2.onBlur,
      _onBlur = _ref2$onBlur === void 0 ? noop : _ref2$onBlur,
      label = _ref2.label,
      controlsLabel = _ref2.controlsLabel,
      _ref2$invalid = _ref2.invalid,
      invalid = _ref2$invalid === void 0 ? false : _ref2$invalid,
      _ref2$value = _ref2.value,
      value = _ref2$value === void 0 ? '' : _ref2$value,
      id = _ref2.id,
      placeholder = _ref2.placeholder,
      srText = _ref2.srText,
      hoursLabel = _ref2.hoursLabel,
      minutesLabel = _ref2.minutesLabel,
      increaseHoursLabel = _ref2.increaseHoursLabel,
      increaseMinutesLabel = _ref2.increaseMinutesLabel,
      decreaseHoursLabel = _ref2.decreaseHoursLabel,
      decreaseMinutesLabel = _ref2.decreaseMinutesLabel,
      attributes = _objectWithoutPropertiesLoose(_ref2, ["dark", "onBlur", "label", "controlsLabel", "invalid", "value", "id", "placeholder", "srText", "hoursLabel", "minutesLabel", "increaseHoursLabel", "increaseMinutesLabel", "decreaseHoursLabel", "decreaseMinutesLabel"]);

  var _value$split = value.split(':'),
      initialHours = _value$split[0],
      initialMinutes = _value$split[1];

  var _useState = useState(false),
      isOpen = _useState[0],
      setIsOpen = _useState[1];

  var _useState2 = useState(initialHours || '00'),
      hours = _useState2[0],
      setHours = _useState2[1];

  var _useState3 = useState(initialMinutes || '00'),
      minutes = _useState3[0],
      setMinutes = _useState3[1];

  var _useState4 = useState(initialHours && initialMinutes ? initialHours + ":" + initialMinutes : ''),
      time = _useState4[0],
      setTime = _useState4[1];

  var _useState5 = useState(false),
      isFocused = _useState5[0],
      toggleFocus = _useState5[1];

  var button = React__default.createElement("button", {
    className: 'btn-time',
    onClick: function onClick() {
      setIsOpen(!isOpen);
      if (isOpen) _onBlur(time);
    }
  }, React__default.createElement(Icon, {
    icon: 'it-clock'
  }));

  var onHoursChange = function onHoursChange(value) {
    var formattedValue = formatTime(value);
    setHours(isNaN(Number(formattedValue)) ? "00" : formattedValue);
    setTime(formattedValue + ":" + minutes);
  };

  var onMinutesChange = function onMinutesChange(value) {
    var formattedValue = formatTime(value);
    setMinutes(isNaN(Number(formattedValue)) ? "00" : formattedValue);
    setTime(hours + ":" + formattedValue);
  };

  var onTimeChange = function onTimeChange(value) {
    var _value$split2 = value.split(':'),
        hours = _value$split2[0],
        minutes = _value$split2[1];

    onHoursChange(hours == null ? void 0 : hours.trim());
    onMinutesChange(minutes == null ? void 0 : minutes.trim());
    setTime(value);
  };

  var infoTextControlClass = getInfoTextControlClass(attributes, attributes.cssModule);

  var _getClasses = getClasses(attributes.className, _extends({}, attributes, {
    normalized: Boolean(attributes.normalized),
    inputPassword: false,
    formControlClass: 'form-control',
    infoTextControlClass: infoTextControlClass,
    isFocused: isFocused,
    originalWrapperClass: attributes.wrapperClassName || attributes.wrapperClass
  }), attributes.cssModule),
      infoTextClass = _getClasses.infoTextClass,
      wrapperClass = _getClasses.wrapperClass;

  return React__default.createElement("div", {
    className: classNames('it-timepicker-wrapper', {
      'theme-dark': dark
    })
  }, React__default.createElement("section", {
    className: 'time-spinner'
  }, React__default.createElement("div", {
    className: 'error_container',
    role: 'alert',
    "aria-atomic": 'true'
  }), React__default.createElement("fieldset", null, React__default.createElement("legend", null, React__default.createElement("span", {
    className: 'sr-only'
  }, srText)), React__default.createElement("div", null, React__default.createElement("div", {
    className: 'calendar-input-container'
  }, React__default.createElement(TimeInputContainer, {
    wrapperClass: wrapperClass,
    infoTextClass: infoTextClass,
    label: label,
    infoText: attributes.infoText,
    id: id,
    button: button,
    invalid: invalid
  }, React__default.createElement(Input, Object.assign({}, attributes, {
    type: 'text',
    label: label,
    id: id,
    placeholder: placeholder,
    value: time,
    onFocus: function onFocus() {
      setIsOpen(false);
      toggleFocus(true);
    },
    onChange: function onChange(e) {
      return onTimeChange(e.target.value);
    },
    invalid: invalid,
    onBlur: function onBlur() {
      toggleFocus(false);

      _onBlur(time);
    },
    noWrapper: true
  })))))), React__default.createElement("div", {
    className: 'spinner-control',
    "aria-hidden": 'true',
    role: 'region',
    "aria-label": controlsLabel,
    tabIndex: -1,
    style: {
      display: isOpen ? 'block' : 'none'
    }
  }, React__default.createElement("div", {
    className: 'spinner-hour spinner'
  }, React__default.createElement(Input, {
    className: 'spinnerHour form-control',
    "aria-label": hoursLabel,
    type: 'number',
    value: hours,
    role: 'spinbutton',
    maxLength: 2,
    "aria-valuenow": Number(hours),
    "aria-valuemax": 23,
    "aria-valuemin": 0,
    onChange: function onChange(e) {
      return onHoursChange(e.target.value);
    }
  }), React__default.createElement("div", {
    className: 'button-wrapper'
  }, React__default.createElement("button", {
    className: 'button-hour btnHourUp',
    "aria-label": increaseHoursLabel,
    "aria-hidden": 'true',
    tabIndex: -1,
    onClick: function onClick() {
      return onHoursChange(addTime(hours, 23));
    }
  }, React__default.createElement("span", {
    className: 'icon-up'
  })), React__default.createElement("button", {
    className: 'button-hour btnHourDown',
    "aria-label": decreaseHoursLabel,
    "aria-hidden": 'true',
    tabIndex: -1,
    onClick: function onClick() {
      return onHoursChange(subtractTime(hours, 0));
    }
  }, React__default.createElement("span", {
    className: 'icon-down'
  })))), React__default.createElement("div", {
    className: 'spinner-min spinner'
  }, React__default.createElement(Input, {
    className: 'spinnerMin form-control',
    "aria-label": minutesLabel,
    type: 'number',
    value: minutes,
    role: 'spinbutton',
    maxLength: 2,
    "aria-valuenow": Number(minutes),
    "aria-valuemax": 59,
    "aria-valuemin": 0,
    onChange: function onChange(e) {
      return onMinutesChange(e.target.value);
    }
  }), React__default.createElement("div", {
    className: 'button-wrapper'
  }, React__default.createElement("button", {
    className: 'btnMinUp button-minute',
    "aria-label": increaseMinutesLabel,
    "aria-hidden": 'true',
    tabIndex: -1,
    onClick: function onClick() {
      return onMinutesChange(addTime(minutes, 59));
    }
  }, React__default.createElement("span", {
    className: 'icon-up'
  })), React__default.createElement("button", {
    className: 'btnMinDown button-minute',
    "aria-label": decreaseMinutesLabel,
    "aria-hidden": 'true',
    tabIndex: -1,
    onClick: function onClick() {
      return onMinutesChange(subtractTime(minutes, 0));
    }
  }, React__default.createElement("span", {
    className: 'icon-down'
  })))))));
};

var Timeline = function Timeline(props) {
  var className = props.className,
      attributes = _objectWithoutPropertiesLoose(props, ["className"]);

  var children = attributes.children,
      rest = _objectWithoutPropertiesLoose(attributes, ["children"]);

  var timelineWrapper = classNames(className, 'it-timeline-wrapper');
  return React__default.createElement("div", Object.assign({
    className: timelineWrapper
  }, rest), children);
};

var TimelinePin = function TimelinePin(_ref) {
  var _ref$iconName = _ref.iconName,
      iconName = _ref$iconName === void 0 ? 'it-code-circle' : _ref$iconName,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? 'it-code-circle' : _ref$icon,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? ' ' : _ref$label,
      past = _ref.past,
      now = _ref.now,
      nowText = _ref.nowText,
      className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["iconName", "icon", "label", "past", "now", "nowText", "className"]);

  var children = attributes.children,
      rest = _objectWithoutPropertiesLoose(attributes, ["children"]);

  var classes = classNames('timeline-element', className);
  var innerClasses = classNames('it-pin-wrapper', className, {
    'it-evidence': past,
    'it-now': now
  });
  var pinIcon = React__default.createElement("div", {
    className: 'pin-icon'
  }, React__default.createElement(Icon, {
    icon: iconName || icon
  }));
  var pinLabel = React__default.createElement("div", {
    className: 'pin-text'
  }, React__default.createElement("span", null, label));
  var pinTextNow = now && React__default.createElement("span", {
    className: 'it-now-label d-none d-lg-flex'
  }, nowText);
  return React__default.createElement("div", {
    className: classes
  }, pinTextNow, React__default.createElement("div", Object.assign({
    className: innerClasses
  }, rest), pinIcon, pinLabel), children);
};

var black = '#000';
var primary = '#06c';
var primaryDark = '#435a70';
var primaryDarker = '#17324d'; // Types here depend of react-select internal emotion dep + more parametric stuff
// @TODO: fix it this way for now, will review later on

var styles = {
  container: function container(provided) {
    return _extends({}, provided, {
      height: '2.5rem'
    });
  },
  control: function control(provided) {
    return _extends({}, provided, {
      height: '2.5rem',
      borderRadius: '0',
      borderLeft: 'none',
      borderRight: 'none',
      borderTop: 'none',
      borderBottom: "solid " + primaryDark + " 1px",
      boxShadow: 'none',
      '&:hover': {
        borderBottom: "solid " + primaryDark + " 1.25px"
      } // border style on hover

    });
  },
  dropdownIndicator: function dropdownIndicator(provided) {
    return _extends({}, provided, {
      fill: primaryDark
    });
  },
  option: function option(provided, _ref) {
    var isDisabled = _ref.isDisabled,
        isFocused = _ref.isFocused,
        isSelected = _ref.isSelected;
    return _extends({}, provided, {
      background: 'white',
      textDecoration: isFocused || isSelected ? 'underline' : 'none',
      color: isSelected ? primaryDarker : primary,
      cursor: isDisabled ? 'not-allowed' : 'pointer'
    });
  },
  placeholder: function placeholder(provided) {
    return _extends({}, provided, {
      fill: primaryDark
    });
  },
  singleValue: function singleValue(provided) {
    return _extends({}, provided, {
      color: black,
      fontWeight: 'bold'
    });
  },
  valueContainer: function valueContainer(provided) {
    return _extends({}, provided, {
      height: '2.5rem'
    });
  }
};

var DropdownIndicator = function DropdownIndicator(props) {
  return React__default.createElement(components.DropdownIndicator, Object.assign({}, props), React__default.createElement(Icon, {
    icon: 'it-arrow-down-triangle',
    "aria-hidden": true
  }));
};

var Option = function Option(props) {
  return React__default.createElement("div", {
    className: 'select-pill text-primary'
  }, React__default.createElement(components.Option, Object.assign({}, props)));
};

var CustomClearText = function CustomClearText(_ref) {
  var clearText = _ref.clearText;
  return React__default.createElement(React__default.Fragment, null, clearText);
};

var Select = function Select(_ref2) {
  var _ref2$clearText = _ref2.clearText,
      clearText = _ref2$clearText === void 0 ? 'Annulla' : _ref2$clearText,
      props = _objectWithoutPropertiesLoose(_ref2, ["clearText", "icon"]);

  // @TODO: move it outside when migrating to hooks
  var ClearIndicator = function ClearIndicator(clearIndicatorProps) {
    var _clearIndicatorProps$ = clearIndicatorProps.children,
        children = _clearIndicatorProps$ === void 0 ? React__default.createElement(CustomClearText, {
      clearText: clearText
    }) : _clearIndicatorProps$,
        _clearIndicatorProps$2 = clearIndicatorProps.innerProps,
        ref = _clearIndicatorProps$2.ref,
        restInnerProps = _objectWithoutPropertiesLoose(_clearIndicatorProps$2, ["ref"]);

    return React__default.createElement("div", Object.assign({
      className: 'select-pill text-primary'
    }, restInnerProps, {
      ref: ref
    }), React__default.createElement("div", {
      style: {
        padding: '0px 5px'
      }
    }, children));
  };

  var selectComponents = _extends({}, props.components, {
    Option: Option,
    DropdownIndicator: DropdownIndicator,
    IndicatorSeparator: null
  });

  if (props.isClearable) {
    selectComponents.ClearIndicator = ClearIndicator;
  }

  return React__default.createElement(SelectBase, Object.assign({}, props, {
    components: selectComponents,
    styles: styles
  }));
};

var StepperHeader = function StepperHeader(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'ul' : _ref$tag,
      className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "className"]);

  var Tag = tag;
  var wrapperClass = classNames('steppers-header', className);
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: wrapperClass
  }));
};

var StepperContainer = function StepperContainer(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      mobile = _ref.mobile,
      dark = _ref.dark,
      className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "mobile", "dark", "className"]);

  var Tag = tag;
  var wrapperClass = classNames('steppers', className, {
    'bg-dark': dark
  }, {
    'mobile-examples': mobile
  });
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: wrapperClass
  }));
};

var variants = {
  confirmed: 'confirmed',
  active: 'active',
  done: 'done',
  mobile: 'steppers-index',
  // @deprecated
  'steppers-index': 'steppers-index'
};
var StepperHeaderElement = function StepperHeaderElement(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'li' : _ref$tag,
      variant = _ref.variant,
      appendIcon = _ref.appendIcon,
      prependIcon = _ref.prependIcon,
      icon = _ref.icon,
      iconName = _ref.iconName,
      noLine = _ref.noLine,
      stepperNumber = _ref.stepperNumber,
      children = _ref.children,
      className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "variant", "appendIcon", "prependIcon", "icon", "iconName", "noLine", "stepperNumber", "children", "className"]);

  var Tag = tag;
  var wrapperClasses = classNames(variant ? variants[variant] : '', className, {
    'no-line': noLine
  });
  var iconClass = classNames('icon', 'steppers-success');
  var spanClass = classNames('steppers-number');
  var iconToAppend = appendIcon || icon;
  var iconToPepend = prependIcon || iconName;
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: wrapperClasses
  }), iconToPepend && React__default.createElement(Icon, {
    icon: iconToPepend
  }), stepperNumber && React__default.createElement("span", {
    className: spanClass
  }, stepperNumber), children, iconToAppend && React__default.createElement(Icon, {
    icon: iconToAppend,
    className: iconClass
  }));
};

var StepperNav = function StepperNav(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'nav' : _ref$tag,
      className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "className"]);

  var Tag = tag;
  var wrapperClass = classNames('steppers-nav', className);
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: wrapperClass
  }));
};

var StepperDots = function StepperDots(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'ul' : _ref$tag,
      className = _ref.className,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "className"]);

  var Tag = tag;
  var wrapperClass = classNames('steppers-dots', className);
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: wrapperClass
  }));
};

var contentStyleLight = {
  height: '400px',
  border: '2px dashed #eee',
  background: '#fafafa',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  color: '#333'
};
var contentStyleDark = {
  height: '400px',
  border: '2px dashed #eee',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  color: '#EEE',
  borderColor: '#aaa',
  background: '#17324d',
  opacity: 0.5
};
var StepperContent = function StepperContent(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      dark = _ref.dark,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "className", "dark"]);

  var Tag = tag;
  var classes = classNames('steppers-content', classNames);
  return React__default.createElement(Tag, Object.assign({}, attributes, {
    className: classes,
    style: dark && contentStyleDark || contentStyleLight,
    "aria-live": 'polite'
  }));
};

var Section = function Section(_ref) {
  var _classNames;

  var color = _ref.color,
      image = _ref.image,
      wrapperClassName = _ref.wrapperClassName,
      className = _ref.className,
      children = _ref.children,
      neutral = _ref.neutral,
      muted = _ref.muted,
      rest = _objectWithoutPropertiesLoose(_ref, ["color", "image", "wrapperClassName", "className", "children", "neutral", "muted"]);

  var classes = classNames('section', wrapperClassName === true ? className : wrapperClassName, (_classNames = {}, _classNames["section-" + color] = color, _classNames['section-image'] = image, _classNames));

  if (neutral || muted) {
    notifyDeprecation("Please use the prop \"color\" instead of the \"" + (neutral ? 'neutral' : 'muted') + "\" for the Section component.");
  } // have them separated from the classes above or these will conflict with the color prop
  // concatenate them at the end. Worst case a duplicate class will appear


  var deprecatedClasses = classNames({
    'section-neutral': neutral,
    'section-muted': muted
  });
  var innerClasses = classNames('section-content', className);
  var styleClass = {
    backgroundImageClass: image ? {
      backgroundImage: "url(" + image + ")"
    } : {}
  };
  return React__default.createElement("div", Object.assign({
    className: "" + classes + (deprecatedClasses ? ' ' + deprecatedClasses : ''),
    style: styleClass.backgroundImageClass
  }, rest), React__default.createElement("div", {
    className: innerClasses
  }, children));
};

var PositionContext = /*#__PURE__*/createContext(undefined);
function usePosition() {
  var context = useContext(PositionContext);
  return context;
}

var getBorderStyleFix = function getBorderStyleFix(fix) {
  var borderReset = ['top', 'bottom', 'right', 'left'].filter(function (curPosition) {
    return fix === 'left' ? curPosition !== 'right' : curPosition !== 'left';
  }).map(function (borderPosition) {
    return "border" + (borderPosition[0].toUpperCase() + borderPosition.substring(1));
  });
  var customStyle = {};

  for (var _iterator = _createForOfIteratorHelperLoose(borderReset), _step; !(_step = _iterator()).done;) {
    var borderPos = _step.value;
    customStyle[borderPos] = 'none';
  }

  return customStyle;
};

function pickIcon(state) {
  switch (state) {
    case 'error':
      return 'it-close-circle';

    case 'info':
      return 'it-info-circle';

    case 'warning':
      return 'it-error';

    case 'success':
      return 'it-check-circle';

    default:
      return undefined;
  }
}

function NotificationElement(_ref) {
  var _classNames;

  var closeToast = _ref.closeToast,
      toastProps = _ref.toastProps,
      title = _ref.title,
      body = _ref.body,
      options = _ref.options;
  var globalFix = usePosition();
  var userIcon = options.icon,
      state = options.state,
      localFix = options.fix,
      dismissable = options.dismissable;
  var fixPosition = localFix == null && globalFix ? globalFix : localFix || globalFix;
  var autoClose = toastProps.autoClose,
      style = toastProps.style;
  var content = typeof body === 'string' ? React__default.createElement("p", null, body) : body;
  var icon = userIcon || pickIcon(state);
  var borderFixes = getBorderStyleFix(fixPosition);
  var wrapperClass = classNames('notification', state, (_classNames = {}, _classNames[fixPosition + "-fix"] = fixPosition, _classNames['with-icon'] = icon, _classNames.dismissable = dismissable || !autoClose, _classNames)); // Need to override some toast styling here

  var customStyle = _extends({}, style, borderFixes, {
    // force a display as the notification class has a "display: none" set
    display: 'block'
  });

  return React__default.createElement("div", {
    className: wrapperClass,
    style: customStyle
  }, React__default.createElement("h5", null, title, icon ? React__default.createElement(Icon, {
    icon: icon
  }) : null), content, (!autoClose || dismissable) && React__default.createElement(Button, {
    className: 'notification-close',
    onClick: closeToast
  }, React__default.createElement(Icon, {
    icon: 'it-close'
  }), React__default.createElement("span", {
    className: 'sr-only'
  }, "Chiudi notifica: ", title)));
}
/**
 * Internal use only. Exported for documentation purposes.
 * @internal
 */


var createNotification = function createNotification(title, body, options, closeToast, toastProps) {
  return React__default.createElement(NotificationElement, {
    title: title,
    body: body,
    options: options,
    closeToast: closeToast,
    toastProps: toastProps
  });
};

var dummyTransition = /*#__PURE__*/cssTransition({
  enter: '',
  exit: ''
});
var Notification = function Notification(props) {
  var _useToast = useToast(_extends({}, props, {
    transition: dummyTransition
  })),
      toastRef = _useToast.toastRef,
      eventHandlers = _useToast.eventHandlers;

  var children = props.children,
      autoClose = props.autoClose,
      onClick = props.onClick,
      role = props.role,
      toastId = props.toastId,
      deleteToast = props.deleteToast,
      closeToast = props.closeToast,
      isIn = props.isIn;
  var customStyle = {
    display: isIn ? 'block' : 'none'
  };
  useEffect(function () {
    if (!isIn) deleteToast(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isIn]);
  useEffect(function () {
    var timer;

    if (autoClose) {
      timer = setTimeout(function () {
        return closeToast();
      }, autoClose);
    }

    return function () {
      if (timer != null) {
        clearTimeout(Number(timer));
      }
    };
  }, [autoClose, closeToast]);
  return React__default.createElement("div", Object.assign({
    id: toastId,
    onClick: onClick
  }, eventHandlers, {
    style: customStyle,
    ref: toastRef
  }, isIn && {
    role: role
  }), children);
};

var KitTransition = /*#__PURE__*/cssTransition({
  enter: "d-block",
  exit: "d-none",
  appendPosition: false
});
var NotificationManager = function NotificationManager(props) {
  var _props$duration, _props$closeOnClick;

  var customStyle = _extends({}, props.style, getBorderStyleFix(props.fix));

  var hookProps = {
    autoClose: (_props$duration = props.duration) != null ? _props$duration : 6000,
    closeOnClick: (_props$closeOnClick = props.closeOnClick) != null ? _props$closeOnClick : true,
    hideProgressBar: true,
    transition: KitTransition,
    rtl: false,
    pauseOnHover: true,
    pauseOnFocusLoss: true,
    newestOnTop: false,
    draggable: false,
    role: 'alert',
    style: customStyle,
    enableMultiContainer: props.containerId != null // enable multi container when an explicit id is passed

  };

  var _useToastContainer = useToastContainer(hookProps),
      getToastToRender = _useToastContainer.getToastToRender,
      containerRef = _useToastContainer.containerRef,
      isToastActive = _useToastContainer.isToastActive;

  var containerId = props.containerId,
      style = props.style,
      fix = props.fix;
  return React__default.createElement(PositionContext.Provider, {
    value: fix
  }, React__default.createElement("div", {
    ref: containerRef,
    id: containerId,
    style: style
  }, getToastToRender(function (_, toastList) {
    return toastList.map(function (_ref) {
      var content = _ref.content,
          toastProps = _ref.props;
      return React__default.createElement(Notification, Object.assign({}, toastProps, {
        isIn: isToastActive(toastProps.toastId),
        key: "notification-" + toastProps.key
      }), content);
    });
  })));
};

function notify(title, bodyOrOptions, options) {
  var body = isReactChild(bodyOrOptions) ? bodyOrOptions : undefined;
  var safeOptions = isReactChild(bodyOrOptions) ? _extends({}, options) : bodyOrOptions || {};
  var NotificationContent = createNotification(title, body, safeOptions);

  var internalOptions = _extends({}, safeOptions, {
    autoClose: safeOptions.duration
  });

  return toast(NotificationContent, internalOptions);
}

function isReactChild(el) {
  return el != null && (typeof el === 'string' || typeof el === 'number' || 'type' in el);
}

notify.dismiss = function (id) {
  return toast.dismiss(id);
};

var SizeContext = /*#__PURE__*/createContext(undefined);
var Toolbar = function Toolbar(_ref) {
  var _classnames;

  var _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'nav' : _ref$tag,
      size = _ref.size,
      children = _ref.children,
      attributes = _objectWithoutPropertiesLoose(_ref, ["tag", "size", "children"]);

  var Tag = tag;
  var classes = classNames('toolbar', (_classnames = {}, _classnames["toolbar-" + size] = size && size !== 'large', _classnames));
  return React__default.createElement(SizeContext.Provider, {
    value: size || 'large'
  }, React__default.createElement(Tag, Object.assign({
    className: classes
  }, attributes), React__default.createElement("ul", null, children)));
};

var disabledMessage = ' elemento disabilitato';

function ToolbarItemLabel(_ref) {
  var label = _ref.label,
      size = _ref.size,
      disabled = _ref.disabled;
  var showSrText = size && size !== 'large';

  if (disabled) {
    if (!label || showSrText) {
      return React__default.createElement("span", {
        className: 'sr-only'
      }, disabledMessage);
    }

    return React__default.createElement(React__default.Fragment, null, React__default.createElement("span", {
      className: 'toolbar-label'
    }, label), React__default.createElement("span", {
      className: 'sr-only'
    }, disabledMessage));
  }

  if (!label) {
    return null;
  }

  return showSrText ? React__default.createElement("span", {
    className: 'sr-only'
  }, label) : React__default.createElement("span", {
    className: 'toolbar-label'
  }, label);
}

var ToolbarItem = function ToolbarItem(_ref2) {
  var _ref2$active = _ref2.active,
      active = _ref2$active === void 0 ? false : _ref2$active,
      badge = _ref2.badge,
      url = _ref2.url,
      iconName = _ref2.iconName,
      label = _ref2.label,
      _ref2$tag = _ref2.tag,
      tag = _ref2$tag === void 0 ? 'a' : _ref2$tag,
      disabled = _ref2.disabled,
      attributes = _objectWithoutPropertiesLoose(_ref2, ["active", "badge", "url", "iconName", "label", "tag", "disabled"]);

  var Tag = tag;
  var size = useContext(SizeContext);
  var activeClass = classNames({
    active: active,
    disabled: disabled
  });
  var badgeWrapper = Boolean(badge) && React__default.createElement("div", {
    className: 'badge-wrapper'
  }, React__default.createElement("span", {
    className: 'toolbar-badge'
  }, badge));

  var ariaAttributes = _extends({}, disabled && {
    'aria-disabled': true
  });

  return React__default.createElement("li", null, React__default.createElement(Tag, Object.assign({
    href: url || '#',
    className: activeClass
  }, attributes, ariaAttributes), badgeWrapper, React__default.createElement(Icon, {
    icon: iconName,
    size: size === 'small' ? 'sm' : ''
  }), React__default.createElement(ToolbarItemLabel, {
    label: label,
    size: size,
    disabled: disabled
  })));
};

var ToolbarDividerItem = function ToolbarDividerItem() {
  return React__default.createElement("li", {
    className: 'toolbar-divider',
    "aria-hidden": true
  });
};

export { Accordion, AccordionBody, AccordionHeader, Alert, AvatarContainer, AvatarExtraText, AvatarGroupContainer, AvatarIcon, AvatarPresence, AvatarStatus, AvatarWrapper, Badge, BottomNav, BottomNavItem, Breadcrumb, Button, Callout, CalloutText, CalloutTitle, Card, CardBody, CardCategory, CardFooterCTA, CardReadMore, CardSignature, CardTag, CardTagsHeader, CardText, CardTitle, Chip, ChipLabel, Collapse, CookieBar, CookieBarButton, CookieBarButtons, Dimmer, DimmerButtons, FontLoader, Forward, GridItem, GridItemText, GridItemTextWrapper, GridList, GridRow, Header, HeaderBrand, HeaderContent, HeaderLinkZone, HeaderRightZone, HeaderSearch, HeaderSocialsZone, HeaderToggler, Headers, Hero, HeroBackground, HeroBody, HeroButton, HeroCategory, HeroTitle, Icon, Input, InputContainer, LinkList, LinkListItem, Megamenu, MegamenuFooter, MegamenuHighlightColumn, MegamenuItem, Modal, ModalBody, ModalFooter, ModalHeader, Nav, NotificationManager, Pager, PasswordInput, Progress, Rating, ResponsiveImage, Section, Select, Sidebar, Skiplink, SkiplinkItem, Spinner, StepperContainer, StepperContent, StepperDots, StepperHeader, StepperHeaderElement, StepperNav, TextArea, ThumbNav, ThumbNavItem, TimeInput, Timeline, TimelinePin, Toggle, Toolbar, ToolbarDividerItem, ToolbarItem, clearIconCache, createNotification, iconsList as icons, notify, preloadIcons };
//# sourceMappingURL=index.js.map
