import React, { InputHTMLAttributes, ElementType, Ref, ReactNode } from 'react';
import type { CSSModule } from 'reactstrap';
declare type InputType = 'text' | 'email' | 'select' | 'file' | 'radio' | 'checkbox' | 'textarea' | 'button' | 'reset' | 'submit' | 'date' | 'datetime-local' | 'hidden' | 'image' | 'month' | 'number' | 'range' | 'search' | 'tel' | 'url' | 'week' | 'password' | 'datetime' | 'time' | 'color';
export interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
    /** Il tipo specifico di input da utilizzare. Il valore di default Ã¨ `text`. */
    type?: InputType;
    /** Dimensione personalizzate del campo di Input secondo le classi Bootstrap/Bootstrap Italia. */
    bsSize?: 'lg' | 'sm';
    size?: number;
    /** Etichetta del campo Input. */
    label?: string | ReactNode;
    /** Testo di esempio da utilizzare per il campo. */
    placeholder?: string;
    /** Testo di aiuto per l'elemento del moduleo form. Richiede che il componente `Input` abbia la prop `id` impostata. */
    infoText?: string;
    /** Il valore nel campo Input. */
    value?: string | number;
    /** Da utilizzare per impedire la modifica del valore contenuto. */
    readOnly?: boolean;
    /** Associato all'attributo readOnly mostra il campo con lo stile classico, mantenendo lo stato di sola lettura. */
    normalized?: boolean;
    /** Utilizzare per mostrare il successo nella validazione del valore nel campo Input */
    valid?: boolean;
    /** Utilizzare per mostrare il fallimento nella validazione del valore nel campo Input */
    invalid?: boolean;
    innerRef?: Ref<HTMLInputElement>;
    /** Utilizzare per mostrare testo statico non modificabile. */
    plaintext?: boolean;
    /** Utilizzare per mostrare un elemento addon a fianco (prima o dopo) il campo input all'interno del componente */
    addon?: boolean;
    /** Oggetto contenente la nuova mappatura per le classi CSS. */
    cssModule?: CSSModule;
    /** Classi aggiuntive da usare per il wrapper del componente Input */
    wrapperClassName?: string;
    /**
     * Classi aggiuntive da usare per il wrapper del componente Input.
     * @deprecated. Usare `wrapperClassName`.
     * */
    wrapperClass?: string;
    /** Utilizzarlo in caso di utilizzo di componenti personalizzati */
    tag?: ElementType;
    /** Classi aggiuntive da usare per il componente Input */
    className?: string;
    /**
     * Usare "valid" o "invalid" per indicare lo stato del componente.
     * @deprecated
     */
    state?: string;
    /**
     * Usare "plaintext".
     * @deprecated
     */
    static?: boolean;
    /** Quando attivo rimuove il componente contenitore dell'Input. Utile per un controllo maggiore dello styling */
    noWrapper?: boolean;
}
declare type InputState = {
    isFocused: boolean;
    hidden: boolean;
    icon: boolean;
};
export declare class Input extends React.Component<InputProps, InputState> {
    state: {
        isFocused: boolean;
        hidden: boolean;
        icon: boolean;
    };
    toggleFocusLabel: (e: React.FocusEvent<HTMLInputElement>) => void;
    toggleBlurLabel: (e: React.FocusEvent<HTMLInputElement>) => void;
    toggleShow: () => void;
    render(): JSX.Element;
}
export {};
