/// <reference types="react" />
import type { CSSModule } from 'reactstrap';
import type { InputProps } from './Input';
declare type ValidationProps = Pick<InputProps, 'valid' | 'invalid'>;
declare type TypeProps = Pick<InputProps, 'plaintext' | 'type'> & {
    staticInput?: boolean;
};
declare type FormControlProps = Pick<InputProps, 'addon' | 'normalized'> & TypeProps;
export declare function getFormControlClass(props: FormControlProps, cssModule?: CSSModule): any;
export declare function getInfoTextControlClass({ valid, invalid }: ValidationProps, cssModule?: CSSModule): any;
export declare function getTag({ tag, plaintext, staticInput, type }: Pick<InputProps, 'tag'> & TypeProps): import("react").ElementType<any>;
declare type InputClassesParams = ValidationProps & Pick<InputProps, 'bsSize' | 'placeholder' | 'value' | 'label' | 'infoText' | 'normalized'> & {
    isFocused: boolean;
    inputPassword?: boolean;
    formControlClass?: string;
    infoTextControlClass: string;
    originalWrapperClass: InputProps['wrapperClassName'];
};
export declare function getClasses(className: string | undefined, { isFocused, valid, invalid, bsSize, placeholder, value, label, infoText, normalized, inputPassword, formControlClass, infoTextControlClass, originalWrapperClass }: InputClassesParams, cssModule?: CSSModule): {
    wrapperClass: any;
    inputClasses: any;
    activeClass: any;
    infoTextClass: any;
};
export {};
