import React, { Ref, ReactNode, TextareaHTMLAttributes } from 'react';
import type { CSSModule } from 'reactstrap';
export interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {
    /** Etichetta del campo TextArea. */
    label?: string | ReactNode;
    /** Testo di esempio da utilizzare per il campo. */
    placeholder?: string;
    /** Testo di aiuto per l'elemento del moduleo form. Richiede che il componente `TextArea` abbia la prop `id` impostata. */
    infoText?: string;
    /** Il valore nel campo TextArea. */
    value?: string | number;
    /** Da utilizzare per impedire la modifica del valore contenuto. */
    readOnly?: boolean;
    /** Associato all'attributo readOnly mostra il campo con lo stile classico, mantenento lo stato di sola lettura. */
    normalized?: boolean;
    /** Utilizzare per mostrare il successo nella validazione del valore nel campo TextArea */
    valid?: boolean;
    /** Utilizzare per mostrare il fallimento nella validazione del valore nel campo TextArea */
    invalid?: boolean;
    innerRef?: Ref<HTMLTextAreaElement>;
    /** Oggetto contenente la nuova mappatura per le classi CSS. */
    cssModule?: CSSModule;
    /** Classi aggiuntive da usare per il wrapper del componente TextArea */
    wrapperClassName?: string;
    /** Classi aggiuntive da usare per il componente TextArea */
    className?: string;
}
declare type InputState = {
    isFocused: boolean;
    hidden: boolean;
    icon: boolean;
};
export declare class TextArea extends React.Component<TextAreaProps, InputState> {
    state: {
        isFocused: boolean;
        hidden: boolean;
        icon: boolean;
    };
    toggleFocusLabel: () => void;
    toggleBlurLabel: (e: {
        target: {
            value: string;
        };
    }) => void;
    toggleShow: () => void;
    render(): JSX.Element;
}
export {};
