import * as React from 'react';
import { Rect } from './types';
interface Props {
    /**
     * Called every time when an update is detected. Same as
     * using `onUpdate` but it requires to render a node.
     */
    children?: (rect: Rect | null) => React.ReactNode;
    /**
     * The reference to the node that should be observed
     */
    node: React.RefObject<HTMLElement>;
    /**
     * Called once a node is mounted for the first time.
     */
    onInit?: (rect: Rect) => void;
    /**
     * Called every time when an update is detected. Same as
     * using `children` but it does not allow to render a node.
     */
    onUpdate?: (rect: Rect) => void;
}
interface IState extends Rect {
    isInitialized: boolean;
}
/**
 * @deprecated Use useRect or useRectEffect instead as it provides better performance.
 */
export default class ObserveBoundingClientRect extends React.PureComponent<Props, IState> {
    private tickId?;
    constructor(props: Props);
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props, prevState: IState): void;
    componentWillUnmount(): void;
    tick(updater: Function): void;
    getRectFromState(state?: IState): Rect | null;
    getRectFromNode(): Rect | null;
    syncState: () => void;
    render(): {} | null | undefined;
}
export {};
