import * as React from 'react';
import { Scroll, Dimensions, Viewport, ViewportChangeHandler, ViewportChangeOptions, PriorityType } from './types';
interface ChildProps {
    scroll: Scroll | null;
    dimensions: Dimensions | null;
}
interface State extends ChildProps {
}
interface Props {
    children?: (props: ChildProps) => React.ReactNode;
    onUpdate?: (props: ChildProps, layoutSnapshot: unknown) => void;
    recalculateLayoutBeforeUpdate?: (props: ChildProps) => unknown;
    disableScrollUpdates: boolean;
    disableDimensionsUpdates: boolean;
    deferUpdateUntilIdle: boolean;
    priority: PriorityType;
}
interface Context {
    addViewportChangeListener: (handler: ViewportChangeHandler, options: ViewportChangeOptions) => void;
    removeViewportChangeListener: (handler: ViewportChangeHandler) => void;
    scheduleReinitializeChangeHandler: (handler: ViewportChangeHandler) => void;
    hasRootProviderAsParent: boolean;
    getCurrentViewport: () => Viewport;
    version: string;
}
export default class ObserveViewport extends React.Component<Props, State> {
    private removeViewportChangeListener?;
    private scheduleReinitializeChangeHandler?;
    private tickId?;
    private nextViewport?;
    static defaultProps: Props;
    constructor(props: Props);
    componentDidUpdate(prevProps: Props): void;
    componentWillUnmount(): void;
    handleViewportUpdate: (viewport: Viewport, layoutSnapshot: unknown) => void;
    syncState(nextViewport: Viewport): void;
    get optionNotifyScroll(): boolean;
    get optionNotifyDimensions(): boolean;
    registerViewportListeners: ({ addViewportChangeListener, removeViewportChangeListener, scheduleReinitializeChangeHandler, hasRootProviderAsParent, getCurrentViewport, }: Context) => React.ReactNode;
    render(): JSX.Element;
}
export {};
