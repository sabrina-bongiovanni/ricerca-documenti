import * as React from 'react';
import { ViewportChangeHandler, ViewportChangeOptions, Viewport, ViewportCollectorUpdateOptions } from './types';
interface Props {
    experimentalSchedulerEnabled?: boolean;
    experimentalSchedulerLayoutCalculatorEnabled?: boolean;
}
export declare const ViewportContext: React.Context<{
    removeViewportChangeListener: (handler: ViewportChangeHandler) => void;
    scheduleReinitializeChangeHandler: (handler: ViewportChangeHandler) => void;
    addViewportChangeListener: (handler: ViewportChangeHandler, options: ViewportChangeOptions) => void;
    getCurrentViewport: () => Viewport;
    hasRootProviderAsParent: boolean;
    version: string;
}>;
export default class ViewportProvider extends React.PureComponent<Props, {
    hasListeners: boolean;
}> {
    static defaultProps: {
        experimentalSchedulerEnabled: false;
        experimentalSchedulerLayoutCalculatorEnabled: false;
    };
    private listeners;
    private updateListenersTick?;
    private initializeListenersTick?;
    constructor(props: Props);
    componentWillUnmount(): void;
    triggerUpdateToListeners: (state: Viewport, { scrollDidUpdate, dimensionsDidUpdate }: ViewportCollectorUpdateOptions, options?: {
        isIdle?: boolean | undefined;
        shouldInitialize?: boolean | undefined;
    } | undefined) => void;
    addViewportChangeListener: (handler: ViewportChangeHandler, options: ViewportChangeOptions) => void;
    scheduleReinitializeChangeHandler: (h: ViewportChangeHandler) => void;
    removeViewportChangeListener: (h: ViewportChangeHandler) => void;
    handleListenerUpdate(): void;
    private collector;
    private getCurrentDefaultViewport;
    private contextValue;
    renderChildren: (props: {
        hasRootProviderAsParent: boolean;
        version: string;
    }) => {} | null | undefined;
    render(): JSX.Element;
}
export {};
