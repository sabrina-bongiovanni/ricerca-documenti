import * as React from 'react';
import { Dimensions, Scroll, Viewport, OnUpdateType } from './types';
export declare const getClientDimensions: () => Dimensions;
export declare const getClientScroll: (prevScrollState?: Scroll) => {
    x: number;
    y: number;
    isScrollingUp: boolean;
    isScrollingDown: boolean;
    isScrollingLeft: boolean;
    isScrollingRight: boolean;
    xTurn: number;
    yTurn: number;
    xDTurn: number;
    yDTurn: number;
};
export declare const createEmptyScrollState: () => {
    x: number;
    y: number;
    isScrollingUp: boolean;
    isScrollingDown: boolean;
    isScrollingLeft: boolean;
    isScrollingRight: boolean;
    xTurn: number;
    yTurn: number;
    xDTurn: number;
    yDTurn: number;
};
export declare const createEmptyDimensionState: () => Dimensions;
interface IProps {
    onUpdate: OnUpdateType;
    onIdledUpdate?: OnUpdateType;
}
export default class ViewportCollector extends React.PureComponent<IProps> {
    private scrollState;
    private dimensionsState;
    private lastSyncedScrollState;
    private lastSyncedDimensionsState;
    private tickId?;
    private scrollMightHaveUpdated;
    private resizeMightHaveUpdated;
    private resizeObserver;
    syncedStateOnce: boolean;
    constructor(props: IProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    tick: () => void;
    handleScroll: () => void;
    handleResize: () => void;
    handleResizeDebounce: () => void;
    getPublicScroll: any;
    getPublicDimensions: any;
    syncState: () => void;
    updateOnIdle: OnUpdateType;
    getPropsFromState(): Viewport;
    render(): null;
}
export {};
