import * as React from 'react';
import { TRenderChildren, IStickyComponentProps } from './types';
declare type OverflowScrollType = 'flow' | 'end';
interface IOwnProps extends IStickyComponentProps {
    /**
     * The reference to the container to stick into. If this is not set, the component will be sticky regardless how far the user scrolls down.
     */
    container?: React.RefObject<any>;
    /**
     * The child node that is rendered within the sticky container. When rendered as a function it will add further information the the function which can be used e.g. to update stylings.
     */
    children?: TRenderChildren<{
        isSticky: boolean;
        isDockedToBottom: boolean;
        isNearToViewport: boolean;
        appliedOverflowScroll: OverflowScrollType;
    }>;
    /**
     * Defines how the sticky element should react in case its bigger than the viewport.
     * Different options are available:
     * * end: The default value will keep the component sticky as long as it reaches the bottom of its container and only then will scroll down.
     * * flow: The element scrolls with the flow of the scroll direction, therefore the content is easier to access.
     */
    overflowScroll?: OverflowScrollType;
    /**
     * A top offset to create a padding between the browser window and the sticky component when sticky.
     */
    defaultOffsetTop?: number;
    /**
     * Tries to detect when the usage of native `position: sticky` is possible and uses it as long as possible. This is an experimental property and might change in its behavior or disappear in the future.
     */
    experimentalNative?: boolean;
}
declare const _default: React.SFC<IOwnProps>;
export default _default;
